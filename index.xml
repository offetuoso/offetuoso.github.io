<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/</link>
    <description>Recent content on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Sun, 18 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programmers 42862 체육복</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42862-gym-suit/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42862-gym-suit/</guid>
      <description>Programmers - 42862 체육복 Task description 원문 : Programmers 42862 링크
 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.</description>
    </item>
    
    <item>
      <title>Programmers 81301 숫자 문자열과 영단어</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-81301-numeric-strings-and-english-words/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-81301-numeric-strings-and-english-words/</guid>
      <description>Programmers - 81301 숫자 문자열과 영단어 Task description 원문 : Programmers 81301 링크
 네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.
  다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.
 1478 → &amp;quot;one4seveneight&amp;quot;234567 → &amp;quot;23four5six7&amp;quot;10203 → &amp;quot;1zerotwozero3&amp;quot;  이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.</description>
    </item>
    
    <item>
      <title>Programmers 64061 크레인 인형 뽑기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-64061-crane-puppet-game/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-64061-crane-puppet-game/</guid>
      <description>Programmers - 64061 크레인 인형 뽑기 Task description 원문 : Programmers 64061 링크
 게임개발자인 &amp;ldquo;죠르디&amp;quot;는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다. &amp;ldquo;죠르디&amp;quot;는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
  게임 화면은 &amp;ldquo;1 x 1&amp;rdquo; 크기의 칸들로 이루어진 &amp;ldquo;N x N&amp;rdquo; 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 &amp;ldquo;5 x 5&amp;rdquo; 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.</description>
    </item>
    
    <item>
      <title>Programmers 70128 내적</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-70128-inner-product/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-70128-inner-product/</guid>
      <description>Programmers - 70128 내적 Task description 원문 : Programmers 70128 링크
 길이가 같은 두 1차원 정수 배열 a, b가 매개변수로 주어집니다. a와 b의 내적을 return 하도록 solution 함수를 완성해주세요.
  이때, a와 b의 내적은 a[0]*b[0] + a[1]*b[1] + &amp;hellip; + a[n-1]*b[n-1] 입니다. (n은 a, b의 길이)
 Condition   a, b의 길이는 1 이상 1,000 이하입니다. a, b의 모든 수는 -1,000 이상 1,000 이하입니다.   input output    a b result     [1,2,3,4] [-3,-1,0,2] 3   [-1,0,1] [1,0,-1] -2     입출력 예 설명</description>
    </item>
    
    <item>
      <title>Programmers 42748 K번째 수</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42748-kth-number/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42748-kth-number/</guid>
      <description>Programmers - 42748 K번째 수 Task description 원문 : Programmers 42748 링크
 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.
  예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면
  array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다.</description>
    </item>
    
    <item>
      <title>Programmers 72410 신규 아이디 추천</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-72410-new-id-recommendation/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-72410-new-id-recommendation/</guid>
      <description>Programmers - 72410 신규 아이디 추천 Task description 원문 : Programmers 72410 링크
 카카오에 입사한 신입 개발자 네오는 &amp;ldquo;카카오계정개발팀&amp;quot;에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. &amp;ldquo;네오&amp;quot;에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다.
  아이디의 길이는 3자 이상 15자 이하여야 합니다. 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.</description>
    </item>
    
    <item>
      <title>Programmers 42576 완주하지 못한 선수</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42576-players-who-did-not-finish/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42576-players-who-did-not-finish/</guid>
      <description>Programmers - 42576 완주하지 못한 선수 Task description 원문 : Programmers 42576 링크
 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.
 Condition   마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 4949 균형잡힌 세상</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-4949-a-balanced-world/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-4949-a-balanced-world/</guid>
      <description>BAEKJOON - 4949 균형잡힌 세상 Task description 원문 : 백준 4949 링크
메시지를 입력받아 괄호를 열고 닫아야 한다.
 열고 닫는 괄호가 균형 맞게 되어있으면 yes 아니면 no 출력
 ex) asd(b)dd(d[ddd]) yes ex) (asdasd] no 메시지의 끝은 .으로 끝나고 메시지가 &amp;ldquo;.&amp;rdquo; 이면 종료   Condition   모든 왼쪽 소괄호(&amp;quot;(&amp;quot;)는 오른쪽 소괄호(&amp;quot;)&amp;quot;)와만 짝을 이뤄야 한다. 모든 왼쪽 대괄호(&amp;quot;[&amp;quot;)는 오른쪽 대괄호(&amp;quot;]&amp;quot;)와만 짝을 이뤄야 한다. 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 1541 잃어버린 괄호 </title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1541-lost-parenthesis/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1541-lost-parenthesis/</guid>
      <description>BAEKJOON - 1541 잃어버린 괄호 Task description 원문 : 백준 1541 링크
 +와 -그리고 괄호를 가진 식에서 괄호를 모두 지웠다. 그리고 나서 괄호를 적절히 쳐서 이 식의 값을 최소로 만들려고 한다. 괄호를 적절히 쳐서 이 식의 값을 최소로 만드는 프로그램을 작성하시오.
 Condition   첫째 줄에 식이 주어진다. 식은 ‘0’~‘9’, ‘+’, 그리고 ‘-’만으로 이루어져 있고, 가장 처음과 마지막 문자는 숫자이다. 그리고 연속해서 두 개 이상의 연산자가 나타나지 않고, 5자리보다 많이 연속되는 숫자는 없다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 10828 스택</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-stack/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-stack/</guid>
      <description>BAEKJOON - 10828 스택 Task description 원문 : 백준 10828 링크
 정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
  명령은 총 다섯 가지이다.
  push X: 정수 X를 스택에 넣는 연산이다. pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다. size: 스택에 들어있는 정수의 개수를 출력한다. empty: 스택이 비어있으면 1, 아니면 0을 출력한다. top: 스택의 가장 위에 있는 정수를 출력한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 10872 팩토리얼</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-factorial/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-factorial/</guid>
      <description>BAEKJOON - 10872 팩토리얼(Factorial) Task description 원문 : 백준 10872 링크
 0보다 크거나 같은 정수 N이 주어진다. 이때, N!을 출력하는 프로그램을 작성하시오.
 Condition   첫째 줄에 정수 N(0 ≤ N ≤ 12)가 주어진다.   input output 예제 입력 1 복사10예제 출력 1 복사3628800예제 입력 2 복사0예제 출력 2 복사1 Solution  0이면 1리턴 0이 아니면 N * factorial(N-1) 리턴 # N * (N-1)!</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.07.08</title>
      <link>https://offetuoso.github.io/blog/english/202107/20210708-english-speak/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202107/20210708-english-speak/</guid>
      <description>dimsom / dumplings (&amp;lsquo;딤섬 / 만두&amp;rsquo;) ingredient (&amp;lsquo;재료, 성분&amp;rsquo;)  a. What ingredients do you need to make a 김치찌개?
 grocery (&amp;lsquo;식료품, 식자재 / 식료품점&amp;rsquo;)  I need to go to the grocery (store). / I need to buy some groceries.
 ingredient 와 grocery   ingredient는 요리 뿐만 아니라 만드는 모든 것의 재료 grocery는 음식을 만들때의 재료   I had A on B . (&amp;lsquo;B에 A가 있었습니다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 11729 하노이 탑 이동 순서</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-11729-hanoi-tower-travel-order/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-11729-hanoi-tower-travel-order/</guid>
      <description>BAEKJOON - 11729 하노이 탑 이동 순서(Hanoi Tower Travel Order) Task description 원문 : 백준 11729 링크
 세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 아래서 부터 큰 순서대로 쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.
이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라.
  아래 그림은 원판이 5개인 경우의 예시이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2941 크로아티아 알파벳</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2941-croatian-alphabet/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2941-croatian-alphabet/</guid>
      <description>BAEKJOON - 2941 크로아티아 알파벳(Croatian Alphabet) Task description 원문 : 백준 2941 링크
 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
    크로아티아 알파벳 변경     č c=   ć c-   dž dz=   đ d-   lj lj   nj nj   š s=   ž z=      예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2798 블랙잭</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2798-black-jack/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2798-black-jack/</guid>
      <description>BAEKJOON - 2798 블랙잭(black jack) Task description 원문 : 백준 2798 링크
  첫번째 줄은 카드의 (장)수 N과 블랙잭 넘버(목표 값) M을 입력받는다. 두번째 줄은 공백으로 구분된 N장의 카드 입력받는다. M이 넘지 않는 3장의 합중 가장 큰 경우 출력.   Condition   첫째 줄에 카드의 개수 N(3 ≤ N ≤ 100)과 M(10 ≤ M ≤ 300,000)이 주어진다. 둘째 줄에는 카드에 쓰여 있는 수가 주어지며, 이 값은 100,000을 넘지 않는 양의 정수이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 1712 손익분기점</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1712-break-even-point/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1712-break-even-point/</guid>
      <description>BAEKJOON - 1712 손익분기점(break even point) Task description 원문 : 백준 1712 링크
 노트북 제조하는데 노트북 판매 대수에 상관없이 A만원의 고정 비용이 든다.
한 대의 노트북을 생산하는 데에는 B만원의 가변 비용이 든다
A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며,
열 대 생산하는 데는 총 1,700만원이 든다.
노트북 가격이 C만원으로 책정되었다고 한다.
생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 7578 토마토</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-7578-tomato/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-7578-tomato/</guid>
      <description>BAEKJOON - 7576 토마토(tomato) Task description  철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다.
  창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2178 미로</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2178-maze/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2178-maze/</guid>
      <description>BAEKJOON - 2606 미로(maze) Task description  N×M크기의 배열로 표현되는 미로가 있다.
1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
  미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2606 바이러스</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2606-virus/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2606-virus/</guid>
      <description>BAEKJOON - 2606 바이러스(virus) Task description  신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
  예를 들어 7대의 컴퓨터가 &amp;lt;그림 1&amp;gt;과 같이 네트워크 상에서 연결되어 있다고 하자. 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다.</description>
    </item>
    
    <item>
      <title>너비 우선 탐색 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/search/bfs/bfs-algorithm/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/search/bfs/bfs-algorithm/</guid>
      <description>너비 우선 탐색 알고리즘 BFS (Breadth-First Search)  BFS는 너비 우선 탐색이라고 부르며, 시작 위치에서 가까운 노드부터 우선적으로 탐색하는 알고리즘이다.
  BFS는 큐 자료구조를 이용하며, 구체적인 동작 과정은 아래와 같다.
   탐색 시작 노드를 큐에 삽입하고 방문 처리를 합니다. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복함.     그래프를 준비하고, 시작 노드는 1로 BFS를 시작한다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.07.01</title>
      <link>https://offetuoso.github.io/blog/english/202107/20210701-english-speak/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202107/20210701-english-speak/</guid>
      <description>I have worked A (&amp;lsquo;나는 A에서 일했었습니다&amp;rsquo;)  Eight years ago, I have worked in a buffet. I served foods and cleaned the rooms. (나는 8년전에 뷔페에서 일했습니다. 나는 음식을 제공하고 방을 청소했습니다.)
 really/quite tough (&amp;lsquo;정말/꽤 힘들다&amp;rsquo;)  it was really/quite tough but fun at the same time. (매우/꽤 힘들었지만, 동시에 재미있었습니다.)
 I worked with A (&amp;lsquo;나는 A와 함께 일했다&amp;rsquo;)  because I worked with my friends. (왜냐하면, 나의 친구들과 같이 일했기 때문이다)</description>
    </item>
    
    <item>
      <title>BAEKJOON - 4673 셀프 넘버</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/self-number/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/self-number/</guid>
      <description>백준 4673 Self Number Task description  문제 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
  양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), &amp;hellip;과 같은 무한 수열을 만들 수 있다.
  예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 8958 OX 퀴즈</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/ox-quiz/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/ox-quiz/</guid>
      <description>백준 8958 ox quiz Task description  &amp;ldquo;OOXXOXXOOO&amp;quot;와 같은 OX퀴즈의 결과가 있다. O는 문제를 맞은 것이고, X는 문제를 틀린 것이다. 문제를 맞은 경우 그 문제의 점수는 그 문제까지 연속된 O의 개수가 된다. 예를 들어, 10번 문제의 점수는 3이 된다.
  &amp;ldquo;OOXXOXXOOO&amp;quot;의 점수는 1+2+0+0+1+0+0+1+2+3 = 10점이다.
  OX퀴즈의 결과가 주어졌을 때, 점수를 구하는 프로그램을 작성하시오.
 Condition   첫째 줄에 테스트 케이스의 개수가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있다.</description>
    </item>
    
    <item>
      <title>Codility - PermCheck</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-check/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-check/</guid>
      <description>PermCheck  Codility - Lesson4 - Counting Elements - PermCheck
 Task description  N 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다.
순열은 1부터 N까지의 각 요소를 한 번만 포함하는 시퀀스입니다. 예를 들어 배열 A는 다음과 같습니다.
  A [0] = 4A [1] = 1A [2] = 3A [3] = 2  순열이지만 배열 A는 다음과 같습니다.
  A [0] = 4A [1] = 1A [2] = 3  값 2가 없기 때문에 순열이 아닙니다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2839 설탕배달</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/sugar-delivery/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/sugar-delivery/</guid>
      <description>백준 2839 설탕배달 Task description  상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
  상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
  상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>Codility - MaxCounter</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/max-counter/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/max-counter/</guid>
      <description>MaxCounter  Codility - Lesson4 - Counting Elements - MaxCounter
 Task description  처음에는 0으로 설정된 N 개의 카운터가 제공되며 두 가지 가능한 작업이 있습니다.
  증가 (X) -카운터 X가 1 증가합니다. 최대 카운터 -모든 카운터는 모든 카운터의 최대 값으로 설정됩니다. M 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다. 이 배열은 연속 작업을 나타냅니다.
  A [K] = X, 즉 1 ≤ X ≤ N이면 연산 K는 증가 (X), A [K] = N + 1이면 작업 K는 최대 카운터입니다.</description>
    </item>
    
    <item>
      <title>샤딩(Sharding)</title>
      <link>https://offetuoso.github.io/blog/develop/database/tech/sharding/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/database/tech/sharding/</guid>
      <description>샤딩(Sharding) Database의 샤딩(Sharding)이란?  같은 테이블 스키마를 가진 데이터를 다수의 데이터베이스에 분산하여 저장하는 방법을 의미.
 샤딩은 수평 분할(Horizontal Partitioning)과 동일. 테이블의 인덱스의 크기를 줄이고, 작업 동시성을 늘리기 위함. application level에서도 가능하지만 database level에서도 가능.   수평 분할 (horizotal partitioning, Range Based Partitioning)  샤딩과 동일한 의미를 가지며 스키마를 다수의 복제본을 구성하고 각각의 샤드에 샤드키를 기준으로 데이터를 분리하는 것을 말한다. DBA가 데이터의 패턴과 저장공간을 잘 알고 샤드키를 선정하여 분할한다.</description>
    </item>
    
    <item>
      <title>AWS RDS에 MySQL 인스턴스 생성 후 연결</title>
      <link>https://offetuoso.github.io/blog/develop/database/mysql/aws-rds-mysql/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/database/mysql/aws-rds-mysql/</guid>
      <description>AWS RDS RDS 서비스 생성  AWS Management Console에서 RDS 접속
 RDS 데이터베이스 인스턴스 생성  RDS에 MySQL 인스턴스를 생성한다.
  데이터베이스 생성 클릭
  데이터베이스 생성
 표준 생성 원하는 데이터베이스 선택    Mysql 버전 선택과 템플릿 설정
 Mysql Community Mysql 버전 선택 - MySQL 5.7.22 템플릿 선택 -    DB 인스턴스 설정
 인스턴스명 추가 DB에 접근할 계정 정보 입력    DB 인스턴스 크기</description>
    </item>
    
    <item>
      <title>Codility - FrogRiverOne</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/frog-river-one/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/frog-river-one/</guid>
      <description>FrogRiverOne  Codility - Lesson4 - Counting Elements - FrogRiverOne
 Task description  은 개구리가 강 건너편으로 가고 싶어합니다. 개구리는 처음에 강의 한 둑 (위치 0)에 있으며 반대쪽 둑 (위치 X + 1)에 도달하려고합니다. 잎은 나무에서 강 표면으로 떨어집니다.
  엽을 나타내는 N 개의 정수로 구성된 배열 A가 제공됩니다. A[K]는 초 단위로 측정 된 시간 K에서 한 잎이 떨어지는 위치를 나타냅니다.
  는 개구리가 강 반대편으로 점프 할 수있는 가장 빠른 시간을 찾는 것입니다.</description>
    </item>
    
    <item>
      <title>Codility - TapeEquilibrium</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/tape-equilibrium/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/tape-equilibrium/</guid>
      <description>Tape Equilibrium  Codility - Lesson3 - Time Complexity - TapeEquilibrium
 Task description  N 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다. 0 &amp;lt;P &amp;lt;N 인 정수 P는이 배열 A를 두 부분으로 분할합니다 (A [0], A [1], &amp;hellip;, A [P − 1] 및 A [P], A [ P + 1], &amp;hellip;, A [N-1]) 분할 된 두 부분의 차이는 다음의 값입니다. | (A [0] + A [1] + &amp;hellip; + A [P − 1]) − (A [P] + A [P + 1] + .</description>
    </item>
    
    <item>
      <title>Codility - PermMissingElem</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-missing-elem/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-missing-elem/</guid>
      <description>Perm Missing Elem  Codility - Lesson3 - Time Complexity - PermMissingElem
 Task description  배열 A는 1 ~ N+1의 범위의 정수를 담고 있는 배열이며 1 ~ N+1의 정수중 1개의 숫자(요소)가 빠져있다.
  예를 들면 다음과 같습니다.
  A[0] = 2A[1] = 3A[2] = 1A[3] = 5  1~5까지의 숫자중 4가 빠져 있기 때문에 4를 반환
 Condition   다음 가정에 대한 효율적인 알고리즘을 작성하십시오.</description>
    </item>
    
    <item>
      <title>Codility - Frog Jmp</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-frog-jmp/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-frog-jmp/</guid>
      <description>Frog Jmp  Codility - Lesson3 - Time Complexity - Frog Jmp
 Task description  세 개의 정수 X, Y, D를 입력받는 함수를 작성합니다.
 X는 개구리의 위치 Y는 개구리의 목표 위치 Y는 개구리의 이동거리 위치 X에서 D씩 최소의 이동을 하여 목표를 Y에 도달하거나 넘어가기 위하여 이동하는 최소 횟수 반환    예를 들면 다음과 같습니다.
  X = 10Y = 85D = 30  개구리는 다음과 같이 위치하므로 함수는 3을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>RESTful API에 Docker Mysql 컨테이너와 Mybatis 연동</title>
      <link>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api-2/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api-2/</guid>
      <description>RESTful API - Docker의 Mysql과 Mybatis 연동 Docker  Docker에 Mysql을 올리는 것은 저번 포스팅에서 진행하였기 때문에 도커에 Mysql 올리기 링크를 남기고 다음부터 진행합니다.
  지난 포스트에서 생성한 Docker의 Mysql 컨테이너를 실행
   docker ps -a (&amp;ldquo;컨테이너 조회&amp;rdquo;)    docker start (&amp;ldquo;컨테이너 시작&amp;rdquo;)  docker restart (&amp;ldquo;컨테이너에 재시작하기&amp;rdquo;) docker stop (&amp;ldquo;컨테이너에 종료하기&amp;rdquo;) docker attach (&amp;ldquo;현재 실행중인 컨테이너에 접속하기&amp;rdquo;)      sudo docker exec -it /bin/bash (&amp;ldquo;컨테이너의 CLI 접속&amp;rdquo;)   PS C:\WINDOWS\system32&amp;gt; docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4b6fb99160bf mysql:5.</description>
    </item>
    
    <item>
      <title>Codility - Odd Occurrences In Array</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-odd-occurrences-in-array/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-odd-occurrences-in-array/</guid>
      <description>Odd Occurrences In Array  Codility - Lesson2 - Array - Odd Occurrences In Array
 Task description  N개의 정수가 담긴 배열 A를 입력받습니다 배열에는 홀수 개의 요소가 포함됩니다. 배열의 각 요소는 짝을 이루지 않는 한 요소를 제외하고 동일한 값을 가진 다른 요소와 짝을 가지고 있습니다. 짝이 없는 요소를 찾으면 해결됩니다
  예를 들어, 주어진 A 배열은 이렇습니다.
  A [0] = 9 A [1] = 3 A [2] = 9A [3] = 3 A [4] = 9 A [5] = 7A [6] = 9   인덱스 0과 2에있는 요소의 값은 9입니다.</description>
    </item>
    
    <item>
      <title>Codility - Cyclic Rotation</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-cyclic-rotation/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-cyclic-rotation/</guid>
      <description>CyclicRotation  Codility - Lesson2 - Array - CyclicRotation
 Task description  N 개의 정수로 구성된 배열 A와 오른쪽으로 회전할 횟수 K가 제공됩니다. A의 각 요소가 오른쪽으로 K 번 이동합니다. N 개의 정수와 K로 구성된 배열 A가 주어지면 배열 A가 K 번 회전 된 배열을 반환합니다.
  예를 들어, 주어진
   A = [3, 8, 9, 7, 6] K = 3    함수는 [9, 7, 6, 3, 8]을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>Mysql DBeaver 설치</title>
      <link>https://offetuoso.github.io/blog/develop/database/mysql/mysql-dbeaver-install/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/database/mysql/mysql-dbeaver-install/</guid>
      <description>Mysql DBeaver 설치 DBeaver 다운로드  DBeaverinstall file 다운로드 운영체제에 맞는 DBeavr 인스톨파일을 다운받아 실행시킨다.   Mysql을 선택한다.   자신의 서버정보에 맞게 입력하면 Mysql을 사용할 수 있다.  </description>
    </item>
    
    <item>
      <title>Mysql Developer 설치</title>
      <link>https://offetuoso.github.io/blog/develop/database/mysql/mysql-developer-install/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/database/mysql/mysql-developer-install/</guid>
      <description>Mysql Developer 설치 SQL Developer 다운로드  SQL Developer 다운로드 운영체제에 맞는 SQL Developer를 다운받아 압축을 풀어 실행시킨다.  mysql-connector-java 설치  mysql connector j 다운로드 링크
  Archives   Platform Independent를 선택하고 zip으로 받습니다.  Oracle Developer 설정  도구 &amp;gt; 환경설정 데이터베이스 &amp;gt; 타사JDBC드라이버 &amp;gt; 항목추가  신규 접속 생성  Mysql이 추가된것을 확인할 수 있다.   자신의 서버정보에 맞게 입력하면 Mysql Developer를 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>Maven Error - Failure to transfer..</title>
      <link>https://offetuoso.github.io/blog/develop/troubleshooting/spring/maven-error-repository/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/troubleshooting/spring/maven-error-repository/</guid>
      <description>Maven error “Failure to transfer…” 문제 Failure to transfer com.google.guava:guava:jar:10.0.1 from https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempte from/to central (https://repo.maven.apache.org/maven2): The operation was cancelled.  https://repo.maven.apache.org/maven2에서 디펜던시를 전송하지 못하는 오류가 발생하였고, 로컬 저장소에 캐시되었습니다.
 해결책 1   프로젝트 우클릭 -&amp;gt; Run as -&amp;gt; Maven Install 프로젝트 우클릭 -&amp;gt; Refresh 프로젝트 우클릭 -&amp;gt; Update Project (옵션 클릭 force update of snapshots/releases)   해결책 2   실행중인 IDE(이클립스, Sts) 종료 로컬 레퍼지토리 삭제</description>
    </item>
    
    <item>
      <title>SpringBoot를 이용한 RESTful API</title>
      <link>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api-1/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api-1/</guid>
      <description>SpringBoot를 이용한 RESTful API SpringBoot  스프링 프레임워크 기반 프로젝트를 복잡한 설정없이 쉽고 빠르게 만들어주는 라이브러리입니다. 사용자가 일일이 모든 설정을 하지 않아도 자주 사용되는 기본설정을 알아서 해줍니다.
  Spring Boot 장점
   라이브러리 관리의 자동화 라이브러리 버전 자동 관리 설정의 자동화 내장 Tomcat 독립적으로 실행 가능한 JAR   간단한 RESTful API 생성 Spring Starter Project로 프로젝트 생성  스프링STS4를 실행 하고, file &amp;gt; new &amp;gt; Spring Starter Project를 선택</description>
    </item>
    
    <item>
      <title>RESTFULL API (RESTful API)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/restapi/restful-api/</guid>
      <description>레스트풀 API(Restful Api) REST (Representational state transfer)  REST(Representational State Transfer)는 월드 와이드 웹과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한 형식이다. REST는 로이 필딩(Roy Fielding)의 2000년 박사학위 논문에서 소개 엄격한 의미로 REST는 네트워크 아키텍처 원리의 모음이다. 여기서 &amp;lsquo;네트워크 아키텍처 원리&amp;rsquo;란 자원을 정의하고 자원에 대한 주소를 지정하는 방법 전반을 일컫는다. 간단한 의미로는, 웹 상의 자료를 HTTP위에서 SOAP이나 쿠키를 통한 세션 트랙킹 같은 별도의 전송 계층 없이 전송하기 위한 아주 간단한 인터페이스를 말한다.</description>
    </item>
    
    <item>
      <title>도커에 Mysql 올리기-1 (Docker Mysql)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/docker/docker-mysql/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/docker/docker-mysql/</guid>
      <description>도커에 Mysql 올리기 도커 버전 체크  cmd창 또는 Windows PowerShell을 싱행한다.  도커 초기화  일단 도커의 이미지/컨테이너들을 모두 지워주는 것 부터 시작하겠습니다.
 PS C:\&amp;gt; sudo docker rm -f `sudo docker ps -a -q`PS C:\&amp;gt; sudo docker rmi -f `sudo docker images` 도커 이미지 가져오기 (get Mysql Image for Docker)  Mysql의 경우 DockerHub에 있기 때문에, 쉽게 이미지를 받아 올 수 있습니다.
 DockerHub에서 mysql 이미지 받아오기   PS C:\&amp;gt; docker pull mysqlUsing default tag: latestlatest: Pulling from library/mysqlDigest: sha256:d50098d7fcb25b1fcb24e2d3247cae3fc55815d64fec640dc395840f8fa80969Status: Image is up to date for mysql:latestdocker.</description>
    </item>
    
    <item>
      <title>도커 설치 (Docker Install) </title>
      <link>https://offetuoso.github.io/blog/develop/backend/docker/docker-install/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/docker/docker-install/</guid>
      <description>도커 (Docker) 도커란 ?  도커란 리눅스의 응용 프로그램들을 프로세스 격리 기술을 사용해 컨테이너로 실행하고 관리하는 오픈 소스 프로젝트. 도커 웹 페이지의 기능을 인용하면 다음과 같다:
 도커 컨테이너는 일종의 소프트웨어를 소프트웨어의 실행에 필요한 모든 것을 포함하는 완전한 파일 시스템 안에 감싼다. 여기에는 코드, 런타임, 시스템 도구, 시스템 라이브러리 등 서버에 설치되는무엇이든 아우른다. 이는 실행 중인 환경에 관계 없이 언제나 동일하게 실행될 것을 보증한다. 도커의 특징   도커의 컨테이너는 각각 독립적이다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.05.14</title>
      <link>https://offetuoso.github.io/blog/english/202105/20210514-english-speak/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202105/20210514-english-speak/</guid>
      <description>The A is about the B (&amp;lsquo;A는 B에 관한것&amp;rsquo;)  The video is about the effect of exercising regularly on our body. (규칙적인 운동이 우리의 몸에 미치는 영향)
 the effect of A on B (&amp;lsquo;A가 B에 미치는 영향&amp;rsquo;) = the influence of A on B  the effect of exercising regularly on our body. (규칙적인 운동이 우리의 몸에 미치는 영향.)
 the influence of A on B (&amp;lsquo;A가 B에 미치는 영향&amp;rsquo;)  the influence of exercising regularly on our body.</description>
    </item>
    
    <item>
      <title>탐색 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/search/search-algorithm/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/search/search-algorithm/</guid>
      <description>탐색 알고리즘 탐색(search)  탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는과정. 그래프 또는 트리의 자료구조에서 데이터를 찾는 문제가 주로 나온다. 대표적으로 DPS, BPS가 있으며, 원리를 제대로 이해해야 코딩테스트 문제를 풀 수 있다. 그런데 DPS와 BPS를 이해하기 위해서 기본 자료구조인 스택, 큐, 재귀 함수 등을 이해가 전제로 되어야한다.
 자료구조  자료구조란 데이터를 표현하고 관리하고 처리하기 위한 구조 스택과 큐는 삽입(Push)과 출력(Pop)이라는 두 핵심적인 함수로 구성 실제 구현할땐 오버플로우와 언더플로우를 고민해야한다.</description>
    </item>
    
    <item>
      <title>왕실의 기사 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/royal_knight/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/royal_knight/</guid>
      <description>[문제1] 왕실의 기사 [문제] 왕실의 기사 : 문제 설명  행복 왕국의 왕실 정원은 체스판과 같은 8 × 8 좌표 평면이다. 왕실 정원의 특정한 한 칸에 나이트가 서있다. 나이트는 매우 충성스러운 신하로서 매일 무술을 연마한다 나이트는 말을 타고 있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없다 나이트는 특정 위치에서 다음과 같은 2가지 경우로 이동할 수 있다
   수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기   수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기   이처럼 8 × 8 좌표 평면상에서 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 출력하는 프로그램을 작성하라.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://offetuoso.github.io/about/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/about/</guid>
      <description>Education Interest Fields Project KTDS 2019.10 ~ Present  Actual Expense Calculation System [Development, Operation]
 Introduction :  Develop and operate a system that calculates the actual construction expenses of subcontractors such as expenses for employee insurance, safety management, waste disposal, and private inventory storage based on submitted data and evidence for KT.
 Technical  Web backend (Java, ExtJs Framework, OracleDB) Web frontend (html, css, JS, jQuery, Jsp) Versioning : Subversion (feature branch, code review) DevOps : Provide a reliable integrated automation system by building, testing, distributing, etc.</description>
    </item>
    
    <item>
      <title>Git 캐시 삭제</title>
      <link>https://offetuoso.github.io/blog/develop/git/202105/time/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/git/202105/time/</guid>
      <description>Git 캐시(cache) 삭제 // 원격 저장소와 로컬 저장소 파일을 삭제$ git rm 파일명// 원격 저장소에 있는 파일만 삭제하고, //로컬 저장소에 있는 파일은 삭제하지 않음$ git rm --cached 파일명 rm -r 옵션// 파일 삭제$ git rm --cached 파일명// 폴더 하위의 모든 파일을 삭제$ git rm -r --cached 폴더명 </description>
    </item>
    
    <item>
      <title>시각 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/time/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/time/</guid>
      <description>[문제1] 시각 [문제] 시각 : 문제 설명  정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하라. 예를 들어 1을 입력했을 때
  다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다 00시 00분 03초 00시 13분 30초
  반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안 되는 시각이다 00시 02분 55초 01시 27분 45초
 [문제] 조건  조건 풀이시간 15분 시간제한 2초, 메모리 128mb</description>
    </item>
    
    <item>
      <title>상하좌우 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202104/up-down-left-right/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202104/up-down-left-right/</guid>
      <description>[문제1] 상하좌우 [문제] 상하좌우 : 문제 설명  여행가 A는 N × N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 × 1 크기의 정사각형으로 나누어져 있다. 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다. 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다
  계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다.</description>
    </item>
    
    <item>
      <title>숫자 카드 게임 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/games-of-number-card/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/games-of-number-card/</guid>
      <description>[문제1] 숫자 카드 게임 [문제] 숫자 카드 게임 : 문제 설명  숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다. 단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다.
  숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열의 개수를 의미한다. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다.</description>
    </item>
    
    <item>
      <title>큰수의 법칙 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/law-of-large-number/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/law-of-large-number/</guid>
      <description>[문제1] 큰 수의 법칙 [문제] 큰 수의 법칙 : 문제 설명  출제자는 큰 수의 법칙을 본인만의 방식으로 다르게 사용하고 있다. 이 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰수를 만드는 법칙이다. 단 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.
  예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.04.08</title>
      <link>https://offetuoso.github.io/blog/english/202104/20210408-english-speak/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202104/20210408-english-speak/</guid>
      <description>a. touching (&amp;lsquo;감동시키는&amp;rsquo;) a. entertaining (&amp;lsquo;재미있는&amp;rsquo;)  It was really entertaining and the storyline was also a bit touching(sad). (정말 재미 있었고 스토리 라인도 약간 감동적이었습니다.)
 These days (&amp;lsquo;요즘&amp;rsquo;) = Nowadays  These day , I go to bed in 1 am and (get up) 7 am (요즘은 새벽 1시에 자고 아침 7시에 일어나)
 On weekends (&amp;lsquo;주말에&amp;rsquo;) get up at (~ time) (&#39;-시에 일어나&#39;) still (&amp;lsquo;여전히&amp;rsquo;)  On weekends, I get up at 1 pm and still go to bed the same (주말에는 오후 1시에 일어나도 똑같이 잠자리에 든다)</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.04.07</title>
      <link>https://offetuoso.github.io/blog/english/202104/20210407-english-speak/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202104/20210407-english-speak/</guid>
      <description>go to ~ (&#39;-에 간다&#39;)  I go to company. (나는 회사에 간다.)
 be going to ~ (&#39;-에 갈꺼다&#39;)  I&amp;rsquo;m going to market. (나는 마트에 간다. 갈예정이 있음 )
 be going to go to ~ (&#39;-에 갈꺼야&#39;)  I&amp;rsquo;m going to go to korea. (나는 한국에 갈꺼야. 아직 계획은 세우지 않았음 )
 went to ~ (&#39;- 갔었다 &amp;lsquo;)  I went to starfield. (나는 스타필드에 갔었다.)</description>
    </item>
    
    <item>
      <title>모험가 길드 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/adventurer-guild/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/adventurer-guild/</guid>
      <description>[문제1] 1이 될때까지 [문제] 1이 될때까지 : 문제 설명  어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.04.02</title>
      <link>https://offetuoso.github.io/blog/english/202104/20210402-english-speak/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202104/20210402-english-speak/</guid>
      <description>prepare (&amp;lsquo;준비하다&amp;rsquo;)  Pick/Choose two questions and prepare your answers. (두 가지 질문을 고르고 답을 준비하십시오.)
 the meaning of the ~ (&#39;-의 의미&#39;)  the meaning of the name. (이름의 의미) The meaning of one’s name may have an influence on their life. (이름의 의미가 그들의 삶에 영향을 미칠 수 있습니다.)
 to have influence on ~ (&#39;-에 영향을 미치다&#39;)  to have influence on life (삶에 영향을 미치다)</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.04.01</title>
      <link>https://offetuoso.github.io/blog/english/202104/20210401-english-speak/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202104/20210401-english-speak/</guid>
      <description>##have influence on ~ (&#39;-에 영향을 미치다&#39;)
 동학개미 had some influence on the national stock market. (&amp;lsquo;동학 개미는 전국 주식 시장에 영향을 미쳤습니다.&#39;) I think, he has achievement that influence on some developer (&amp;lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.&#39;) I think, his achievement has some influence on [software developers/engineers.] (&amp;lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.&#39;) Netflix now has a huge influence on the media industry.</description>
    </item>
    
    <item>
      <title>더하기 혹은 곱하기 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/sum-and-multiply/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/sum-and-multiply/</guid>
      <description>[문제1] 곱하기 혹은 더하기 [문제] 곱하기 혹은 더하기 : 문제 설명  각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 &amp;lsquo;x&amp;rsquo; 혹은 &amp;lsquo;+&amp;rsquo; 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성. 단, + 보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정.
   예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2)x 9)x 8)x 4) = 576이다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.26</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210326-english-speak/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210326-english-speak/</guid>
      <description>prefers a to b (&amp;lsquo;b 보다 a를 더 선호&amp;rsquo;)  we are prefers apple to banana (&amp;lsquo;우리는 바나나보다 사과를 선호합니다.&#39;)
 giving birth (&amp;lsquo;출산&amp;rsquo;) = when the baby was born  when the mother was giving birth (&amp;lsquo;어머니가 출산 할때&amp;rsquo;)
 n. name (&amp;lsquo;이름을 지어주다&amp;rsquo;)  How do American Indian women name their babies? (&amp;lsquo;아메리칸 인디언 여성들은 아기의 이름을 어떻게 지어주나요?&#39;)
 compound words (&amp;lsquo;합성어&amp;rsquo;)  handphone is compound word that Consists of two word?</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.25</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210325-english-speak/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210325-english-speak/</guid>
      <description>Introduction (&amp;lsquo;소개, 서론&amp;rsquo;) Introduction → Body → Conclusion  This pagraph is book of Introduction (&amp;lsquo;이 단락은 서론입니다.&#39;)
 topic sentence (&amp;lsquo;주제 문장&amp;rsquo;)  this is topic sentence in paragraph (&amp;lsquo;이것은 단락의 주제 문장입니다&amp;rsquo;)
 Q. What is a must-included item when you summarize a text? (&amp;lsquo;글을 요약할때 꼭 포함되어야 하는것?&#39;)  main points, paraphrase the topic sentence
 plagiarism (&amp;lsquo;표절&amp;rsquo;)  this book has relate to rumor of plagiarism (&amp;lsquo;이 책은 표절 소문과 연루되어 있습니다&amp;rsquo;)</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.24</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210324-english-speak/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210324-english-speak/</guid>
      <description>Read the sentences (&amp;lsquo;문장 읽기&amp;rsquo;)  you must to read the sentences in book (&amp;lsquo;책에있는 문장을 읽어야합니다&amp;rsquo;)
 Read the sentences (&amp;lsquo;문장 읽기&amp;rsquo;)  you must to read the sentences in book (&amp;lsquo;책에있는 문장을 읽어야합니다&amp;rsquo;)
 some (&amp;lsquo;약간, 전체는 아니고, 아예 아닌것도 아님&amp;rsquo;)  some people who attempt to change (&amp;lsquo;변화를 시도하는 사람들&amp;rsquo;)
 새로운 단어 passage 문구 / 통로silently 잠자코, 조용히repeat 반복intonation 말의 높낮이some not all but not none 문법오류 I was weekends also studying English and.</description>
    </item>
    
    <item>
      <title>1이 될때까지 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/make-one/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/make-one/</guid>
      <description>[문제1] 1이 될때까지 [문제] 1이 될때까지 : 문제 설명  어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>거스름돈 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/reverse-charge/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/reverse-charge/</guid>
      <description>[문제1] 거스름돈 [문제] 거스름돈 : 문제 설명  당신은 음식점의 계산을 도와주는 점원입니다. 카운트에서는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬로 줘야 할 돈은 N은 항상 10의 배수입니다.
 [문제] 거스름돈 : 문제 해결 아이디어   최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐의 단위부터 돈을 거슬러 주면 됩니다. N원을 거슬러 줘야 할 때, 가장먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러줍니다.</description>
    </item>
    
    <item>
      <title>그리디 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/greedy-algorithm/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/greedy-algorithm/</guid>
      <description>그리디 알고리즘(탐욕법) 그리디 알고리즘이란 ?  그리디 알고리즘이란
 그리디 알고리즘(탐욕법)은 현재상황에서 가장 좋은 것만 고르는 방법을 의미. 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 있는 능력을 요구. 그리디 해법은 그 정당성 분석이 중요. 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요.   [문제 상황] 루트 노드로 부터 시작하여 가는 노드의 합을 최대로 만들고 싶습니다.  Q. 최적의 해는 무엇인가요 ?</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.19</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210319-english-speak/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210319-english-speak/</guid>
      <description>do you mind?  (1) Are you okay/fine with it? (&amp;lsquo;괜찮나요?&#39;) Do you mind if I change the schedule? 괜찮다면, 스케쥴을 변경해도 될까요? (2) Mind your own business. (&amp;lsquo;니 일이나 신경써.&#39;) Do you mind? 니 일이나 신경써.
 attempt to ~ (&#39;-를 시도하다.&#39;)  they are attempt to find something 그들은 무언갈 찾으려 한다. i attempt to speaking english 나는 영어로 말하길 시도한다.
 I had a meeting ~ (&#39;-를 만났다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.17</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210317-english-speak/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210317-english-speak/</guid>
      <description>Did you take a look at ~? (&#39;-보셨나요?&#39;)  Did you take a look at the Book 책 보셨나요? Did you take a look at sky? 하늘을 보셨나요?
 I took a look at ~ (&amp;lsquo;나는 -를 보았다.&#39;)  I took a look at the book, 1 hour ago 1 시간 전에 책을 봤어요. I was took a look at sky last day 나는 어제 하늘을 봤어요
 a. impressed (&amp;lsquo;깊은 인상&amp;rsquo;) n.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.16</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210316-english-speak/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210316-english-speak/</guid>
      <description>I use ~ (&amp;lsquo;난 -를 사용한다.&#39;)  I use Java 난 자바를 사용한다. I use Korean 난 한국어를 사용한다.
 I’m preparing ~ (&#39;-를 준비중입니다&amp;rsquo;)  ** I’m preparing to change job ** 나는 이직을 준비중입니다. ** I’m preparing to party in my house ** 우리 집에서 파티를 준비하고 있어요.
 ~ is intense (&#39;-이 ~빡세다~힘들다.&#39;)
 Work is not intense 일은 힘들지 않다. Always Study is intense 공부는 힘들다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.15</title>
      <link>https://offetuoso.github.io/blog/english/202103/20210315-english-speak/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/english/202103/20210315-english-speak/</guid>
      <description>I’m used to ~ (&amp;lsquo;난 -에 익숙해&amp;rsquo;)  I&amp;rsquo;m used to you 난 너에게 익숙해 I&amp;rsquo;m used to working overtime 난 야근에 익숙해
 I&amp;rsquo;m afraid ~ (&amp;lsquo;유감스럽지만,&#39;)  I&amp;rsquo;m afraid Rainy outside 유감이지만, 밖에 비가 오는 것 같아 **I&amp;rsquo;m afraid ** 유감이지만, 밖에 비가 오는 것 같아
 I’m working on ~ (&amp;lsquo;지금 -를 하고있어&amp;rsquo;)  I’m working on my English speaking 난 영어 말하기를 공부하고 있어 i&amp;rsquo;m working on study Algorithm 난 알고리즘을 공부하고 있어</description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>https://offetuoso.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/search/</guid>
      <description>Nothing on this page will be visible. This file exists solely to respond to /search URL.
Setting a very low sitemap priority will tell search engines this is not important content.</description>
    </item>
    
  </channel>
</rss>
