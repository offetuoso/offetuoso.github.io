<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JPA on offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/subcategories/jpa/</link>
    <description>Recent content in JPA on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/subcategories/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JPA Lazy 로딩 Jackson Serialize 에러 - org.springframework.http.converter.HttpMessageConversionException-Type-definition error-ByteBuddyInterceptor</title>
      <link>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/org.springframework.http.converter.httpmessageconversionexception-type-definition-error-bytebuddyinterceptor/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/org.springframework.http.converter.httpmessageconversionexception-type-definition-error-bytebuddyinterceptor/</guid>
      <description>JPA Lazy 로딩 Jackson Serialize 에러 - org.springframework.http.converter.HttpMessageConversionException-Type-definition error-ByteBuddyInterceptor   API에서 Jackson을 사용해 Lazy 로딩으로 설정된 다른 엔티티를 Serialize하는 부분에서 오류가 발생
 오류 {&amp;quot;timestamp&amp;quot;: &amp;quot;2022-08-15T08:24:46.374+00:00&amp;quot;,&amp;quot;status&amp;quot;: 500,&amp;quot;error&amp;quot;: &amp;quot;Internal Server Error&amp;quot;,&amp;quot;trace&amp;quot;: &amp;quot;org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]-&amp;gt;jpabook.jpashop.domain.Order[\&amp;quot;member\&amp;quot;]-&amp;gt;jpabook.jpashop.domain.Member$HibernateProxy$w28vcvob[\&amp;quot;hibernateLazyInitializer\&amp;quot;])\r\n\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:462)\r\n\tat org.</description>
    </item>
    
    <item>
      <title>JPA 양방향 무한 루프 java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</title>
      <link>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/java.lang.illegalstateexception-cannot-call-senderror-after-the-response-has-been-committed/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/java.lang.illegalstateexception-cannot-call-senderror-after-the-response-has-been-committed/</guid>
      <description>java.lang.IllegalStateException: Cannot call sendError() after the response has been committed   API에서 양방향관계 엔티티를 반환하는 예제를 작성하던 도중 발생하였다.
 오류 java.lang.IllegalStateException: Cannot call sendError() after the response has been committedat org.apache.catalina.connector.ResponseFacade.sendError(ResponseFacade.java:472) ~[tomcat-embed-core-9.0.60.jar:9.0.60]at org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.sendServerError(DefaultHandlerExceptionResolver.java:552) ~[spring-webmvc-5.3.18.jar:5.3.18]at org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.handleHttpMessageNotWritable(DefaultHandlerExceptionResolver.java:442) ~[spring-webmvc-5.3.18.jar:5.3.18]at org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.doResolveException(DefaultHandlerExceptionResolver.java:209) ~[spring-webmvc-5.3.18.jar:5.3.18]at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:142) ~[spring-webmvc-5.3.18.jar:5.3.18]at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80) ~[spring-webmvc-5.3.18.jar:5.3.18]... 원인   Member 엔티티와 Order는 1:N의 관계이며 양방향 관계로 되어있다. API에서 Members를 호출할때 Orders를 가지고 있는 데이터가 문제가 되었다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA API개발 성능최적화] 지연 로딩과 조회 성능 최적화</title>
      <link>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/lazy-loading-and-query-performance-optimization/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/lazy-loading-and-query-performance-optimization/</guid>
      <description>스프링부트 JPA API개발 성능최적화  목차   API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 컬렉션 조회 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   API 개발 고급   대부분 조회에서 성능 이슈가 많이 나오는데 어떻게 조회 API를 성능 최적화 할지 심도 깊게 공부해 보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA API개발 성능최적화] 회원 등록 API</title>
      <link>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-registration-api/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-registration-api/</guid>
      <description>스프링부트 JPA API개발 성능최적화  목차   API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   API 개발 기본   회원 등록 API, 회원 수정 API, 회원 조회 API를 만들어 보겠습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA API개발 성능최적화] 회원 수정 API</title>
      <link>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-update-api/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-update-api/</guid>
      <description>스프링부트 JPA API개발 성능최적화  목차   API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   API 개발 기본  회원 수정 API   회원 수정 API는 저장 API와 크게 다를 것이 없습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA API개발 성능최적화] 회원 조회 API</title>
      <link>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-list-api/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/jpa-api-development-and-performance-optimization/member-list-api/</guid>
      <description>스프링부트 JPA API개발 성능최적화  목차   API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   API 개발 기본  회원 조회 API   조회는 단순 검색 및 반환이기 때문에 어렵지는 않습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 주문 목록 검색 및 취소 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-list-search-and-cancel/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-list-search-and-cancel/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 주문 목록 검색 및 취소 개발  상품리스트와 상품 검색  OrderController.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 주문 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-development/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 상품 주문 화면 개발   컨트롤러를 만들고 orderForm을 호출할 매핑 메소드와 주문 양식을 submit 할때 처리할 메서드를 생성합니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 변경 감지(Dirty Checking) 와 병합(merge)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/jpa-dirty-checking-and-merge/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/jpa-dirty-checking-and-merge/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 변경 감지(Dirty Checking) 와 병합(merge)   JPA를 사용하며 변경감지와 병합의 차이를 모르게 되면 많은 시간을 허비하게 되며, 정말 중요한 내용이니 꼭 이해 하고 넘어가야합니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 목록 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/1-product-list-development/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/1-product-list-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 상품 목록 화면 개발   컨트롤러에서 /items 리퀘스트를 받을 수 있는 itemList()를 생성하고, 서비스를 통해 상품목록을 받아 리턴해 줍니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 수정 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/2-product-edit-development/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/2-product-edit-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 상품 수정 화면 개발  ItemController.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 등록 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-register-development/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-register-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 상품 등록 화면 개발   강좌와 다르게 Item의 상속관계에 맞게 아이템들을 등록해 보려 합니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 회원 목록 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-list-development/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-list-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 회원 리스트   MemberController.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 회원 등록 화면 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-join-view-development/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-join-view-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   홈 화면과 레이아웃 회원 등록  Member Controller 회원가입 페이지 이동(get) 매핑 추가  java/jpabook/jpashop/controller/MemberController.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 웹 계층 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/web-layer-development/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/web-layer-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   웹 계층 개발  홈 화면과 레이아웃   java/jpabook/jpashop/controller/HomeController.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 주문 검색 기능 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-search-development/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-search-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   주문 검색 기능 개발  JPA에서 동적 쿼리를 어떻게 해결해야 하는가   화면을 보시면 회원명과 주문상태를 검색조건으로 필터링 할 수 있는 기능인 것을 확인 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 주문 기능 테스트</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-logic-test-code/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-logic-test-code/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   주문 기능 테스트   테스트 할때는 스프링 기능 없이 메소드 하나 하나 단위 테스트 하는 것이 바람직하나 스프링과 JPA가 잘 엮여서 동작하는 것을 테스트 하기 때문에 통합테스트로 작성합니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 주문 서비스 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/2-order-service-development/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/2-order-service-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   주문 서비스 개발   java/jpabook/jpashop/service/OrderService.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 주문 도메인 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-domain-development/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/order-domain-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   주문 도메인 개발   지금까지 설명했던것 중에 가장 중요한 부분입니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 서비스 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-logic-test-code/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-logic-test-code/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   상품 기능 테스트  테스트 요구사항    상품등록을 성공해야한다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 리포지토리 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/1-product-repository-development/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/1-product-repository-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   상품 리포지토리 개발  상품 리포지토리   java/jpabook/jpashop/repository/ItemRepository.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 상품 도메인 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-domain-development/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/product-domain-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   상품 도메인 개발  구현 기능   상품등록 상품 목록 조회 상품 수정   구현 순서   상품 엔티티 개발(비즈니스 로직 추가) 상품 리포지토리 개발 상품 서비스 개발 상품 기능 테스트   상품 엔티티 개발(비즈니스 로직 추가)   Item.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 회원 기능 테스트</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-logic-test-code/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-logic-test-code/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   회원 기능 테스트  테스트 요구사항    회원가입을 성공해야한다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 회원 서비스 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-service-development/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-service-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   회원 서비스 개발  서비스 디렉토리 생성  java/jpabook/jpashop/service 위치에 리포지토리 경로 생성</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 회원 도메인 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-domain-development/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/member-domain-development/</guid>
      <description>애플리케이션 구현  목차    회원 도메인 개발   회원 리포지토리 개발 회원 서비스 개발 기능 테스트  상품 도메인 개발   상품 엔티티개발(비즈니스 로직추가) 상품 리포지토리 개발 상품 서비스 개발  주문 도메인 개발   주문, 주문상품 엔티티 개발 주문 리포지토리 개발 주문 서비스 개발  웹 계층 개발   홈 화면과 레이아웃 회원 등록 회원 목록 조회 상품 등록 상품 목록 상품 수정 변경 감지와 병함(merge) 상품 주문 주문 목록 검색, 취소  API 개발 기본   회원 등록 API 회원 수정 API 회원 조회 API  API 개발 고급   조회용 샘플 데이터 입력 지연 로딩과 조회 성능 최적화 페이징과 한계 돌파 OSIV와 성능 최적화  다음으로   스프링 데이터 JPA 소개 QueryDSL 소개 마무리   회원 도메인 개발  구현 기능    회원 등록 회원 목록 조회   구현순서    회원 엔티티 코드 다시 보기 회원 리포지토리 개발 회원 서비스 개발 회원 기능 테스트   회원 엔티티 코드 다시 보기   java/jpabook/jpashop/domain/Member.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 애플리케이션 구현 준비</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/preparing-for-application-implementation/</link>
      <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/preparing-for-application-implementation/</guid>
      <description>애플리케이션 구현 준비  목차    구현 요구사항 애플리케이션 아키텍쳐   구현 요구사항   이번에는 애플리케이션을 어떻게 구현할지에 대한 구현 요구사항이랑 애플리케이션 아키텍처에 대하여 정리하겠습니다.
  도메인 설계가 다 끝났는데, 그것은 데이터 적인 설계였고 이번에는 어디까지 구현할지 범위에 대한 요구사항을 정리해 보도록 하겠습니다.
   회원 기능  회원 등록 회원 조회   상품 기능  상품 등록 상품 수정 상품 조회   주문 기능  상품 주문 주문 내역 조회 주문 취소     회원 기능  회원 등록   회원 등록하는 페이지이며, 비지니스 메서드를 통해 회원등록 구현 되어야 합니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 엔티티 클래스 개발</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/entity-class-development/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/entity-class-development/</guid>
      <description>도메인 분석 설계  목차    요구사항 분석 도메인 모델과 테이블 설계 엔티티 클래스 개발 엔티티 설계시 주의점   엔티티 클래스 개발    예제에서는 설명을 쉽게하기 위해 엔타타 클래스에 Getter, Setter를 모두 열고, 최대한 단순하게 설계 실무에서는 가급적 Getter, Setter는 꼭 필요한 경우에만 사용하는 것을 추천   도메인 패키지 생성   jpabook/jpashop/domain 패키지를 생성하여 추가할 엔티티 클래스들을 모아두도록 하겠습니다.
  기존의 jpabook/jpashop/entity의 패키지는 지우도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 도메인 모델과 테이블 설계</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/domain-model-and-db-architecture/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/domain-model-and-db-architecture/</guid>
      <description>도메인 분석 설계  목차    요구사항 분석 도메인 모델과 테이블 설계 엔티티 클래스 개발 엔티티 설계시 주의점   도메인 모델과 테이블 설계  도메인 모델 설계   회원은 주문 여러개를 주문 할 수 있습니다. 회원과 주문은 1:N의 관계 입니다.
  회원은 주문을 할때 한번에 여러 상품을 주문할 수 있습니다. 상품은 또한 여러개의 각각의 주문에 담길 수 있습니다. 주문에 여러개의 상품이 담길 수 있기 때문에</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 요구사항 분석</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/requirement-analysis/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/requirement-analysis/</guid>
      <description>도메인 분석 설계  목차    요구사항 분석 도메인 모델과 테이블 설계 엔티티 클래스 개발 엔티티 설계시 주의점   요구사항 분석   회원기능
 회원가입 - 이름, 도시, 거리, 우편번호 입력 받아 회원을 등록 회원 목록 - 가입자 seq, 이름, 도시, 주소, 우편번호 조회가능    상품기능
 상품등록 - 상품명, 가격, 수량, 저자, ISBN 입력받아 상품등록 상품목록 - 등록된 상품 seq, 상품명, 가격 재고수량, 수정버튼 상품수정 - 상품명, 가격, 수량, 저자, ISBN 저장한 값 로드 후 상품수정    상품 주문</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] JPA 동작확인</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/jpa-start/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/jpa-start/</guid>
      <description>JPA 동작확인  JPA와 DB설정   여태까지 application.properties 를 이용해왔는데, 간혹 yml을 사용하는 것을 봐왔는데 이번에 사용하게 되었습니다.
  resources/application.properties를 확장자를 변경하여 백업(또는 제거) 하고 같은 resources/ 위치에 application.yml 생성
  resources/application.yml
 spring:datasource:url: jdbc:h2:tcp://localhost/~/jpashop; # MVCC=true H2 1.4.200 버전부터 MVCC 옵션이 제거되었습니다. username: sapassword:driver-class-name: org.h2.Driverjpa:hibernate:ddl-auto: create # 애플리케이션 동작 시점에 엔티티 재생성properties:# show_sql: true #sysout을 통해 남기는 sqlformat_sql: truedatabase: h2devtools:livereload:enabled: true # livereload 사용시 활성화restart:enabled: false #운영 에서는 제거.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] H2 데이터베이스 설치 및 세팅</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/h2-preferences/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/h2-preferences/</guid>
      <description>H2 데이터베이스 설치 및 세팅  H2 데이터베이스   개발이나 테스트 용도로 가볍고 편리한 DB, 웹 화면 제공
 다운로드 및 설치    사용 환경에 따라 받으시면 되며, 저는 1.4.200 버전을 받아 설치 하였습니다.
 H2 Database 설치   JPA 시작 과거 포스팅 참조
  H2 Database 설치  H2 홈페이지에서 OS에 맞는 설치 파일을 다운로드한다.
  C:\Program Files (x86)\H2\bin\h2.bat 실행
  jdbc:h2:~/jpashop (최초 1회, 세션키 유지한 상태로 실행)</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] View 환경 설정</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/view-preferences/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/view-preferences/</guid>
      <description>View 환경 설정 Thymeleaf  Thymeleaf
  Spring에서도 밀고 있고, 스프링과 많은 기능을 제공하고 있어, Jsp 보다 Thymeleaf를 사용하는 추세입니다.
  장점은
  자연 템플릿 (Natural Templates) 마크업을 깨트리지 않고 html 마커 안에 프로그래밍 문법을 넣어 기능을 개발 할 수 있습니다. WAS 없이도 브라우저만으로도 템플릿의 결과물을 볼 수 있습니다.
 &amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th th:text=&amp;quot;#{msgs.headers.name}&amp;quot;&amp;gt;Name&amp;lt;/th&amp;gt;&amp;lt;th th:text=&amp;quot;#{msgs.headers.price}&amp;quot;&amp;gt;Price&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr th:each=&amp;quot;prod: ${allProducts}&amp;quot;&amp;gt;&amp;lt;td th:text=&amp;quot;${prod.name}&amp;quot;&amp;gt;Oranges&amp;lt;/td&amp;gt;&amp;lt;td th:text=&amp;quot;${#numbers.formatDecimal(prod.price, 1, 2)}&amp;quot;&amp;gt;0.</description>
    </item>
    
    <item>
      <title>[스프링부트 JPA 활용] 프로젝트 생성</title>
      <link>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/new-project-setting/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/using-springboot-jpa/new-project-setting/</guid>
      <description>스프링부트 JPA 활용(Using SpringBoot JPA)  목차    프로젝트 생성 라이브러리 살펴보기 H2 데이터베이스 설치 JPA와 DB 설정, 동작확인   프로젝트 생성    스프링 부트 스타터(https://start.spring.io/) 사용기능 : Web, Thymeleaf, JPA, H2, Lombok  groupId : jpabook artifactId : jpashop      프로젝트 타입은 Gradle Project 최근에는 Maven이 아니라 Gradle이 많이 사용된다고 합니다.
  언어는 당연히 자바 !
  스프링부트는 안정화 버전을 추천하며, 전 2.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 에필로그(Epilogue)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpa-epilogue/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpa-epilogue/</guid>
      <description>JPA 에필로그(Epilogue)   장장 4개월의 기간동안 강의를 보며, 강의 PPT를 읽고 넘기는 것이 아니라 하나 하나 블로그로 정리를 한다는 목적으로 타자연습을 하였습니다.
  조금이라도 머리에 남기 바라는 심정과 고질적인 독수리 타법을 개선하고자 노력하였습니다.
  일이 바쁘다, 몸이 아프다 라는 핑계로 매우 늦게 완강을 하였지만, 결국 해냈습니다.
  사실 SI에서 JPA를 만져볼 일이 없지만, 저와 같이 새로운 것에 도전하고 배우려는 사람이 늘어나고 지금보다 JPA가 더 많은 기업에서 사용하고 많은 개발자들이 사용하는 날이 온다면 SI에서도 당연히 JPA를 사용하는 날이 오리라 믿습니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 벌크 연산(Bulk Operation)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/bulk-operation/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/bulk-operation/</guid>
      <description>JPQL 벌크 연산(Bulk Operation)   여러 건(대량의 데이터)을 한 번에 수정하거나 삭제하는 방법
 벌크 연산    재고가 10개 미만인 모든 상품의 가격을 10% 상승하려면? JPA 변경 감지(Duty Checking) 기능으로 실행하려면 너무 많은 SQL 실행  재고가 10개 미만인 상품을 리스트로 조회한다. 상품 엔티티의 가격을 10% 증가한다. 트랜잭션 커밋 시점에 변경감지가 동작한다.   변경된 데이터가 100건이라면 100번의 UPDATE SQL실행   벌크 연산 예제    쿼리 한 번으로 여러 테이블 로우 변경(엔티티) excuteUpdate()의 결과는 영향받은 엔티티 수 반환 UPDATE, DELETE 지원 INSERT(insert into .</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 네임드 쿼리(Named Query)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-named-query/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-named-query/</guid>
      <description>JPQL 네임드 쿼리(Named Query)  Named 쿼리  @NamedQuery   쿼리를 엔티티 같은 곳에 미리 선언을 해둘 수 있는 기능. 쿼리를 재활용 해서 사용할 수 있습니다.
 @Entity@NamedQuery(name = &amp;quot;member.findByUsername&amp;quot;,query = &amp;quot;SELECT m FROM Member WHERE n.username :username&amp;quot;)public class Member {...}List&amp;lt;Member&amp;gt; resultList = em.createQuery(&amp;quot;Member.findByUsername&amp;quot;, Member.class).setParameter(&amp;quot;username&amp;quot;, &amp;quot;회원1&amp;quot;).getResultList(); 정적 쿼리    미리 정의해서 이름을 부여해두고 사용하는 JPQL 정적 쿼리 어노테이션, XML에 정의 애플리케이션 로딩 시점에 초기화 후 재사용  애플리케이션 로딩 시점에 정적인 쿼리를 JPA 또는 하이버네이트가 SQL로 파싱을 하고, 캐싱을 합니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 엔티티 직접 사용(Direct Use Of Entity)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-direct-use-of-entity/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-direct-use-of-entity/</guid>
      <description>JPQL 엔티티 직접 사용(Direct Use Of Entity)  엔티티 직접 사용  기본 키 값   JPQL에서 엔티티를 직접 사용하면 SQL로 어떠한 쿼리가 실행되는 지에 대한 정리 입니다.
  COUNT(m) 같은 SQL 함수에서 엔티티를 직접 사용했을때, SQL에서 해당 엔티티의 식별자인 기본 키 값을 사용하게됩니다.
  [JPQL]
 SELECT COUNT(m.id) FROM Member M // 엔티티의 아이디를 사용SELECT COUNT(m) FROM Member M // 엔티티를 직접 사용  [SQL] (둘다 같은 다음 SQL 실행)</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 다형성 쿼리(Polymorphic Query)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-polymorphic-query/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-polymorphic-query/</guid>
      <description>JPQL 다형성 쿼리(Polymorphic Query)   이번 시간에는 다형성 쿼리에 대해 정리를해 보겠습니다.
 다형성 쿼리   JPA가 이러한 다형성을 위해 제공하는 특수한 기능들이 있습니다.
 TYPE   조회 대상을 특정 자식으로 한정
  예) Item 중에 Book, Movie를 조회해라
  [JPQL]
 SELECT i FROM Item iWHERE TYPE(i) IN (Book, Movie)  [SQL]
 SELECT i.* from Item iWHERE i.DTYPE IN (&#39;B&#39;, &#39;M&#39;) TREAT (JPA2.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 페치 조인(Fetch Join)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-fetch-join/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-fetch-join/</guid>
      <description>JPQL 페치 조인(Fetch Join)   실무에서 정말 정말 중요함 쿼리가 여러번 나갈거 같은 쿼리를 한방 쿼리로 변환
 페치 조인    SQL 조인 종류가 아니다. JPQL에서 성능 최적화를 위해 제공하는 기능 연관된 엔티티나 컬렉션을 SQL 한 번에 함께 조회하는 기능 join fetch 명령어 사용 [LEFT [OUTER] | INNER] JOIN FETCH 조인경로   엔티티 페치 조인    회원을 조회하면서 연관된 팀도 함께 조회(SQL 한 번에) SQL을 보면 회원 뿐만 아니라 팀(T.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 경로 표현식(PATH EXPRESSION)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-path-expression/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-path-expression/</guid>
      <description>JPQL 경로 표현식(PATH EXPRESSION)  경로 표현식   .(점|dot)을 찍어 객체를 탐색 하는 것
 SELECT m.username -&amp;gt; 상태 필드FROM mJOIN m.team t	-&amp;gt; 단일 값 연관 필드JOIN m.order o -&amp;gt; 컬렉션 값 연관 필드WHERE t.name = &#39;team1&#39;   .을 통해 상태 필드, 단일 값 연관 필드, 컬렉션 값 연관 필드를 탐색하느냐에 따라서 상태 필드 표현식, 단일 값 연관 필드 표현식, 콜렉션 값 연관 필드 표현식 3가지 표현식이 있으며 내부적으로 각각 다른 동작을 하게 됩니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 기본 함수(BASIC FUNCTION)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-basic-function/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-basic-function/</guid>
      <description>JPQL 기본 함수(BASIC FUNCTION)  JPQL 기본 함수   JPQL에서 제공하는 표준함수로 DB에 상관없이 사용가능
   CONCAT SUBSTRING TRIM LOWER, UPPER LENGTH LOCATE ABS, SQRT, MOD SIZE, INDEX(JPA 용도)   이전 소스   src/main/java/jpql/domain/Member.java
  Member.java package jpql.domain;import javax.persistence.*;@Entitypublic class Member {public Member(){}@Id @GeneratedValueprivate Long id;private String username;private int age;@ManyToOne@JoinColumn(name = &amp;quot;TEAM_ID&amp;quot;)private Team team = new Team();public Long getId() {return id;}public void setId(Long id) {this.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 조건문(CONDITIONAL STATEMENT)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-conditional-statement/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-conditional-statement/</guid>
      <description>JPQL 조건문(CONDITIONAL STATEMENT)  조건문    기본 CASE 문   SELECT CASE WHEN m.age &amp;lt;= 10 THEN &#39;학생요금&#39;WHEN m.age &amp;gt;= 60 THEN &#39;경로요금&#39;ELSE &#39;일반요금&#39;ENDFROM Member m    단순 CASE 문   SELECT CASE t.nameWHEN &#39;팀A&#39; THEN &#39;인센티브110%&#39;WHEN &#39;팀B&#39; THEN &#39;인센티브120%&#39;ELSE &#39;인센티브105%&#39;ENDFROM Team t	   COALESCE : 하나씩 조회해서 NULL이 아니면 반환 사용자 이름이 없으면 &amp;lsquo;이름 없는 회원&amp;rsquo;을 반환   SELECT COALESCE(m.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 서브 쿼리(Sub Query)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/sub-query/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/sub-query/</guid>
      <description>JPA 서브 쿼리(Sub Query)  서브 쿼리    나이가 평균보다 많은 회원   SELECT m FROM Member m WHERE m.age &amp;gt; (SELECT AVG(m2.age) FROM Member m2)   한 건이라도 주문한 고객   SELECT m FROM Member m WHERE (SELECT COUNT(o) FROM Order o WHERE m = o.member) &amp;gt; 0  일반적인 SQL과 같이 서브 쿼리를 사용할 수 있습니다.
 서브 쿼리 지원 함수    [NOT] EXISTS (subquery) : 서브쿼리에 결과가 존재하면 참  {ALL|ANY|SOME} (subquery) ALL 모두 만족하면 참 ANY, SOME: 같은 의미, 조건을 하나라도 만족하면 참   [NOT] IN (subquery) : 서브쿼리의 결과 중 하나라도 같은 것이 있으면 참   서브 쿼리 지원 함수 - 예제   팀A 소속인 회원   SELECT m FROM Member mWHERE EXISTS (SELECT t FROM m.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL 타입 표현(Type Expression)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-type-expression/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql-type-expression/</guid>
      <description>JPQL 타입 표현(Type Expression)  JPQL 타입 표현    문자 : &amp;lsquo;HELLO&amp;rsquo;, &amp;lsquo;She&#39;&amp;rsquo;s&amp;rsquo;  따옴표(single quotation) 표현시 single quotation 2개 &#39;&#39;   숫자 : 10L(Long), 10D(Double), 10F(Float) Boolean : TRUE, FALSE ENUM : jpabook.MemberType.Admin (전체 패키지명 포함) 엔티티 타입 : TYPE(m) = Member (상속 관계에서 사용)   이전 소스   src/main/java/jpql/domain/Member.java
  Member.java package jpql.domain;import javax.persistence.*;@Entitypublic class Member {public Member(){}@Id @GeneratedValueprivate Long id;private String username;private int age;@ManyToOne@JoinColumn(name = &amp;quot;TEAM_ID&amp;quot;)private Team team = new Team();public Long getId() {return id;}public void setId(Long id) {this.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 조인(JOIN)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/join/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/join/</guid>
      <description>JPA 조인(JOIN)  조인    내부 조인   SELECT m from Member m JOIN m.team tSELECT m from Member m INNER JOIN m.team t  SQL과 비슷하지만 엔티티 중심으로 JPQL이 작성되며, Member의 Team 엔티티에 Alias를 t로 주어 조인 쿼리를 작성합니다.
   외부 조인   SELECT m from Member m LEFT JOIN m.team tSELECT m from Member m LEFT OUTER JOIN m.team t   세타 조인 연관관계가 없는 조인, 관계 없는 컬럼끼리의 조인   SELECT count(m) from Member m, Team t WHERE m.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA Paging API</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/paging-api/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/paging-api/</guid>
      <description>JPA Paging API  페이징 API   JPA는 페이징을 다음 두 API로 추상화
   setFirstResult(int startPosition) : 조회 시작 위치 (0 부터 시작) setMaxResults(int maxResult) : 조회할 데이터 수    Oracle 또는 MySql에서 페이징을 구현하기 위해서는 rownum을 사용하고 정렬을 위해 order by를 적용하려면 또 한번 더 감싸서 페이징을 쿼리를 작성하게 되어 3뎁스 까지도 나오게 되어 지저분한 쿼리가 됩니다.
  그런데 JPA는 2가지 API만 사용하면됩니다. 페이징은 단지 몇번째 부터 몇개 가져와야 하는지 밖에 없습니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA Projection(SELECT)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/projection/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/projection/</guid>
      <description>JPA Projection(SELECT)  셀렉션과 프로젝션 셀렉션  데이터베이스에서 행단위로 데이터를 조회하는 방식 예) SELECT m.* FROM MEMBER m
 프로젝션  데이터베이스에서 열단위로 데이터를 조회하는 방식 예) SELECT m.username, m.age FROM MEMBER m
   프로젝션과 셀렉션 동시 사용 가능   이전 소스   src/main/java/jpql/domain/Member.java
  Member.java package jpql.domain;import javax.persistence.*;@Entitypublic class Member {public Member(){}@Id @GeneratedValueprivate Long id;private String username;private int age;@ManyToOne@JoinColumn(name = &amp;quot;TEAM_ID&amp;quot;)//private Team team = new Team();private Team team;public Long getId() {return id;}public void setId(Long id) {this.</description>
    </item>
    
    <item>
      <title>object references an unsaved transient instance - save the transient instance before flushing 에러</title>
      <link>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/object-references-an-unsaved-transient-instance-save-the-transient-instance-before-flushing/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/troubleshooting/jpa/object-references-an-unsaved-transient-instance-save-the-transient-instance-before-flushing/</guid>
      <description>object references an unsaved transient instance - save the transient instance before flushing 에러 오류 org.hibernate.TransientPropertyValueException: object references an unsaved transient instance - save the transient instance before flushing 원인   @ManyToOne 또는 @OneToMany 매핑을 사용 할때 부모 엔티티에 포함된 FK가 아직 영속되지 않아 생긴 영속성 전이(CASCADE)에 대한 오류 발생    N:1 관계시 양방향 설정시, 연결된 엔티티 객체를 생성 시 FK가 필수로 필요   @ManyToOne@JoinColumn(name = &amp;quot;TEAM_ID&amp;quot;)private Team team = new Team(); // &amp;lt;&amp;lt;   Member를 생성할 때, Team이 필수 값이 아니라면, new Team() 으로 미리 생성해 둘 필요가 없다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPQL(Java persistence Query Language)</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/jpql/</guid>
      <description>JPQL(Java persistence Query Language)  JPQL - 기본 문법과 기능  JPA에서 제공되는 다양한 쿼리 방법    JPQL은 객체지향 쿼리 언어다. 따라서 테이블을 대상으로 쿼리 하는 것이 아니라 엔티티를 대상으로 쿼리 한다. JPQL은 SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다. JPQL은 결국 SQL로 변환된다.    객체모델
  DB모델
  JPQL을 예제 작성을 위한 Maven 프로젝트를 생성 하겠습니다.
  jpa-basic\jpql
  pom.xml
  pom.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 객체지향 쿼리 언어 소개</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/object-oriented-query-language/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/object-oriented-query-language/</guid>
      <description>객체지향 쿼리 언어 (JPQL)  목차    객체지향 커리 언어 소개 JPQL 기본 문법과 기능 패치 조인 경로 표현식 다형성 쿼리 엔티티 직접 사용 Named 쿼리 벌크 연산   객체지향 쿼리 언어 소개  JPA에서 제공되는 다양한 쿼리 방법   JPA에서는 실무에서 사용하기 위한 다양한 검색 조건과 Join을 사용하여 조회 등 복잡한 쿼리를 구현할 수 있도록 기능 다양한 쿼리 방법을 제공합니다.
   JPQL 엔티티 객체를 조회하는 객체지향 쿼리다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 6 - 값 타입 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-6/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-6/</guid>
      <description>실전 예제 6 - 값 타입 매핑  값 타입 추가    city, street, zipcode 는 Address 값 타입으로 변경   값 타입 추가 순서    값 타입 클래스 추가 - Address.java    @Embeddable 어노테이션 추가    불변 객체로 생성 3.1. 필드(맴버 변수) 추가 3.2. getter 추가 3.3. setter private로 생성 또는 생성 X   값 타입은 공유해서 사용시 변경이 되면 같이 사용하는 값 모두 변경되므로 주의 값 타입은 변경하지 말고 객체를 새로 생성해서 갈아껴야함.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 값 타입 컬렉션</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/value-type-collection/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/value-type-collection/</guid>
      <description>값 타입 컬렉션 (Value Type Collection)  값 타입 컬렉션   값 타입 컬렉션이란 값타입을 컬렉션에 담아서 사용하는 것을 의미 합니다.
  Member가 faviriteFoods와 addressHistory 라는 두가지 컬렉션을 가지고 있습니다.
  DB 테이블로 구현할때 문제가 됩니다. 값 타입이 하나 일때는 필드 속성으로 해서 Member 테이블에 넣으면 되었는데
  관계형 DB에는 컬렉션을 담을 수 있는 구조가 없습니다. 요즘에서야 JSON 타입을 지원하는 데이터베이스도 있긴합니다.
  관계형 DB에서 이런 구조를 사용하기 위해 1:N 관계의 각 테이블을 생성하여야 합니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 값 타입과 불변 객체</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/immutable-object/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/immutable-object/</guid>
      <description>값 타입과 불변 객체  값 타입   값 타입은 복잡한 객체 세상을 조금이라도 단순화하려고 만든 개념이다. 따라서 값 타입은 단순하고 안전하게 다룰 수 있어야 한다.
  값 타입 공유 참조     임베디드 타입 같은 값 타입을 여러 엔티티에서 공유하면 위험함 부작용(side effect) 발생    회원 1과 회원 2가 같은 값 타입인 주소를 바라보고 있는데 NewCity로 값을 바꾸면, 회원1과 회원2의 주소가 모두 NewCity로 변경됩니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 임베디드 타입</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/embedded-type/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/embedded-type/</guid>
      <description>임베디드 타입  임베디드(복합 값) 타입    새로운 값 타입을 정의할 수 있음 JPA는 임베디드 타입(embedded type)이라 함 주로 기본 값 타임을 모아 만들어서 복합 값 타입이라고도 함 int, String과 같은 값 타입 (엔티티 아님)   임베디드 타입   회원 엔티티는 이름, 근무 시작일, 근무 종료일, 주소 도시, 주소 번지, 주소 우편번호를 가진다.
  회원 엔티티는 이름, 근무 기간, 집 주소를 가진다.
   Period는 startDate와 endDate를 가지게 클래스로 만들어 값 타입을 만듭니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 값 타입</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/value-type/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/value-type/</guid>
      <description>값 타입  목차    기본값 타입 임베디드 타입(복합 값 타입) 값 타입과 불변 객체 값 타입의 비교 값 타입 컬렉션   기본값 타입  JPA의 데이터 타입 분류   엔티티 타입  @Entity로 정의하는 객체 데이터가 변해도 식별자로 지속해서 추적 가능 예) 회원의 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능       값 타입  int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체 식별자가 없고 값만 있으므로 변경시 추적불가 예)숫자 100을 200으로 변경하면 완전히 다른 값으로 대체     값 타입 분류   기본값 타입  자바 기본 타입(int, double) 래퍼 클래스(Integer, Long) String   임베디드 타입(embedded type, 복합 값 타입) 예) 좌표 X,Y 묶어서 Position 객체 하나로 사용     컬렉션 값 타입(collection value type) 자바 컬렉션 객체안에 기본값 타입 혹은 임베디드 타입 등을 추가해 사용   기본값 타입    예) String name, int age 생명주기를 엔티티에 의존  예) 회원을 삭제하면 이름, 나이 필드도 함께 삭제   값 티입은 공유하면 안됨(사이드 이팩트, 부수효과 조심)  예) 회원 이름 변경시 다른 회원의 이름도 함께 변경되면 안됨     참고 : 자바의 기본 타입은 절대 공유 X   int, double 같은 기본 타입(primitive type)은 절대 공유 되면 안됨 기본 타입은 항상 값을 복사함 Integer같은 래퍼 클래스나 String 같은 특수한 클래스는 공유 가능한 객체이지만 변경X    ValueMain.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 5 - 연관관계 관리</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-5/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-5/</guid>
      <description>실전 예제 5 - 연관관계 관리  글로벌 페치 전략 설정    모든 연관관계를 지연로딩으로 @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 지연로딩으로 변경하길 권장   글로벌 페치 전략 예제소스에 적용   기존 작성했던 엔티티중 @ManyToOne, @OneToOne에는 (fetch = FetchType.LAZY)를 추가한다.
  Album.java
 package jpabasic.jpashop.domain;import javax.persistence.DiscriminatorValue;import javax.persistence.Entity;@Entity@DiscriminatorValue(&amp;quot;A&amp;quot;)public class Album extends Item{private String artist;private String etc;public String getArtist() {return artist;}public void setArtist(String artist) {this.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 영속성 전이(CASCADE)와 고아 객체</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/cascade/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/cascade/</guid>
      <description>영속성 전이(CASCADE)와 고아 객체  목록    영속성 전이 고아 객체   영속성 전이  앞에서 나온 즉시 로딩, 지연 로딩, 연관관계 세팅 이 세가지와 완전 별개의 개념
   특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶을때 예 : 부모 엔티티를 저장할 때 자식 엔티티도 함께 저장.   영속성 전이: 저장  @OneToMany(mappedBy=&amp;quot;parent&amp;quot;, cascade=CasecadeType.PERSIST)  Parent.java
 package relativemapping;import javax.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 즉시 로딩과 지연로딩</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/eager-loading-and-lazy-loading/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/eager-loading-and-lazy-loading/</guid>
      <description>프록시와 연관관계 관리  즉시 로딩과 지연로딩  지연 로딩  Member를 조회할때 Team도 함께 조회해야 할까?  단순히 Member 정보만 사용하는 비지니스 로직 println(member.getName()); 연관관계가 등록되어 있어도 지금처럼 member만 사용하면 손해일 수 있습니다.
 ![contact](/images/develop/backend/orm-jpa-basic/eager-loading-and-lazy-loading/im g-001.png)
지연 로딩 LAZY을 사용해서 프록시로 조회 	@Entitypublic class Member {@Id @generatedValueprivate Long id;@Column(name = &amp;quot;USERNAME&amp;quot;)private String name;@ManyToOne(fetch = FetchType.LAZY)@JoinColumn(name = &amp;quot;TEAM_ID&amp;quot;)private Team team;}  Member.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 프록시와 연관관계</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/proxy-and-relation/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/proxy-and-relation/</guid>
      <description>프록시와 상속관계  목차    프록시 즉시 로딩과 지연 로딩 지연 로딩 활용 영속성 전이 : CASCADE 고아 객체 영속성 전이 + 고아객체, 생명주기   프록시  Member를 조회할때 Team도 함께 조회해야 할까?  JpaMain.java
  private static void printMember(Member member){System.out.println(&amp;quot;username = &amp;quot;+member.getUsername());}private static void printMemberAndTeam(Member member){String username = member.getUsername();System.out.println(&amp;quot;username = &amp;quot;+username);Team team = member.getTeam();System.out.println(&amp;quot;team = &amp;quot;+team.getName());}  Member객체를 출력하는 메서드와 Member객체와 Member가 가지는 Team 객체를 출력하는 메서드가 있을때, Member만 조회하는 쿼리를 수행할때 Team까지 Join을 통하여 조회 쿼리를 수행한다면 자원낭비이다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 4 - 상속관계 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-4/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-4/</guid>
      <description>실전 예제 4 - 상속관계 매핑  요구사항 추가    상품의 종류는 음반, 도서, 영화가 있고 이후 더 확장될 수 있다. 모든 데이터는 등록일과 수정일이 필수다.   도메인 모델  도메인 모델 상세  테이블 설계 상속관계 매핑 추가  Item.java
   Item.java를 abstract로 바꾼다. 단일 테이블 전략이기 때문에 Item.java에 @Inheritance(strategy = InheritanceType.SINGLE_TABLE) 를 추가한다. @DiscriminatorColumn를 추가하여 DTYPE를 추가한다.   package jpabasic.jpashop.domain;import javax.persistence.*;import java.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA @MappedSuperclass</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/mapped-superclass/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/mapped-superclass/</guid>
      <description>상속관계 매핑  목차    상속관계 매핑 @MappedSuperclass   MappedSuperclass  @MappedSuperclass  예를 들어 이전의 상속관계 매핑을 사용하지 않고 단순하게 객체의 입장에서 id와 name이 계속 나오게 되는데 매번 만들기 귀찮아서 부모 클래스에 두고 속성만 상속받아서 사용하고 싶을때 사용.   DB에서는 각각 테이블에 id, name을 포함하며 DB와 구조가 다르지만, 매번 추가 해야하는 속성을 엔티티마다 추가해야 하는 불편함을 줄여보자 해서 나오게 된 기능입니다.
 @MappedSuperclass 예제  DBA의 요청으로 엔티티 마다 생성한 사람의 ID, 생성한 시간, 마지막 수정한 사람 ID, 마지막 수정한 시간을 각각 추가하려 합니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 상속관계 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/inheritance-mapping/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/inheritance-mapping/</guid>
      <description>상속관계 매핑  목차    상속관계 매핑 @MappedSuperclass   상속관계 매핑    객체는 상속관계가 있지만, 관계형 데이터베이스에는 상속 관계 없음 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사 상속관계 매핑 : 객체의 상속과 구조와 DB의 슈퍼타입 관계를 매핑    음반, 영화, 책의 공통 속성은 물품에 두고, 각각의 속성들을 밑의 서브 타입에 지정하여 논리 모델을 구성합니다.
  객체는 Item이라는 추상 클래스를 만들고 Item을 상속받는 Album, Movie, Book 객체를 구성할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 3 - 다양한 연관관계 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-3/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-3/</guid>
      <description>실전 예제 3 - 다양한 연관관계 매핑  요구사항 분석  배송, 카테고리 추가 - 엔티티    주문과 뱌송은 1:1(@OneToOne) 상품과 카테고리는 N:M(@ManyToMany)   배송, 카테고리 추가 - ERD   Delivery.java 와 Category.java를 생성합니다.
 일대일 양방향 관계 Order.java - Delivery.java   주 객체은 외래키를 가지고 있는 Order.java  @OneToOne @JoinColumn(name = &amp;ldquo;DELIVERY_ID&amp;rdquo;) private Delivery delivery;       대상 객체는 상대 객체인 Delivery.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 다양한 연관관계 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/mapping-various-associations/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/mapping-various-associations/</guid>
      <description>다양한 연관관계 매핑  목차    연관관계 매핑시 고려사항 3가지 다대일 [N:1] 일대다 [1:N] 일대일 [1:1] 다대다 [N:M]   연관관계 매핑시 고려사항 3가지    다중성 단방향, 양방향 연관관계의 주인   다중성    다대일 : @ManyToOne 일대다 : @OneToMany 일대일 : @OneToOne 다대다 : @ManyToMany (실무에서 사용X)    애매한 경우 반대의 경우를 생각해 보면 된다. 다대일의 반대는 일대다, 일대일의 반대는 일대일, 다대다의 반대는 다대다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 2 - 연관관계 매핑 시작</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-2/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-2/</guid>
      <description>실전 예제 2 - 연관관계 매핑 시작 요구사항 분석   실전 예제 1 요구사항 분석과 기본 매핑에서 테이블에 맞춘 설계를 했던 것에 연관 관계 매핑을 적용 시켜 보도록 하겠습니다.
 테이블 구조   테이블 구조는 이전과 같다.
 객체 구조   참조를 사용하도록 변경
  OrderItem과 Item에서 N:1이면서 화살표가 OrderItem에서 Item으로 단방향인 것을 알 수 있는데, 이는 주문된 아이템(OrderItem) 입장에서는 어떠한 아이템(Item)인지 알아야하지만, 아이템 입장에서는 통계 같은 프로그램을 하지 않는 이상 이 아이템이 어떠한 아이템 주문이 되었는지 알 필요가 없습니다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 연관관계 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/relation-mapping/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/relation-mapping/</guid>
      <description>연관관계 매핑   테이블에 맞춰서 외래키를 가져오면서 설계하는 방식이 아닌 order.getMember()이런식으로 연관관계를 맺어서 좀더 객체지향 식으로 설계할 수 있는지 알아보겠습니다. 여태 까지는 어려움이 없었겠지만, 관계형 DB와 객체지향 사이에서 오는 간극이 크고 각각의 패러다임이 다르기 때문에 어려움이 있습니다.
 목표    객체와 테이블 연관관계 차이를 이해 객체의 참조와 테이블의 외래 키를 매핑 용어 이해  방향(Direction) : 단방향, 양방향 다중성(Multiplicity) : 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M)의 이해 연관관계의 주인(Owner) : 객체의 양방향 관계는 괸리 주인이 필요     목차    연관관계가 필요한 이유 단방향 연관관계 양방향 연관관계와 연관관계의 주인 실전예제 - 2.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 기본키 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/primary-key-mapping/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/primary-key-mapping/</guid>
      <description>기본키 매핑  기본 키 매핑 어노테이션    @Id @GeneratedValue   @Id @GeneratedValue(strategy = GenerationTpye.AUTO)private Long id; 기본 키 매핑 방법    직접 할당 : @Id 만 사용 자동 생성(@GeneratedValue)  IDENTITY : 데이터베이스에 위임, MySLQ) SEQUENCE : 데이터베이스 시퀀스 오브젝트 사용, ORACLE  @SequenceGenerator 필요     TABLE: 키 생성용 테이블 사용, 모든 DB에서 사용  @TableGenerator 필요   AUTO: 방언에 따라 자동 지정, 기본값   Id 직접할당 - @Id 사용   Member.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 실전 예제 1 - 요구사항 분석과 기본 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-1/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/practical-example-1/</guid>
      <description>실전 예제 1 - 요구사항 분석과 기본 매핑  요구사항 분석    회원은 상품을 주문할 수 있다. 주문 시 여러 종류의 상품을 선택할 수 있다.   기능 목록    회원 기능  회원등록 회원조회       상품 기능  상품등록 상품수정 상품조회       주문 기능  상품주문 주문내역조회 주문취소     도메인 모델 분석    회원과 주문의 관계 : 회원은 여러 번 주문할 수 있다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 객체와 매핑</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/entity-mapping/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/entity-mapping/</guid>
      <description>객체와 매핑  객체와 테이블 매핑  목차    객체와 테이블 매핑 필드와 컬럼 매핑 기본 키 매핑 실전 예제 - 1. 요구사항 분석과 기본 매핑   엔티티 매핑 소개    객체와 테이블 매핑 : @Entity, @Table 필드와 컬럼 매핑 : @Column 기본키 매핑 : @Id 연관관계 매핑 : @ManyToOne, @JoinColumn   객체와 테이블 매핑  @Entity    @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 부른다.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 영속성 관리</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/persistence-manage/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/persistence-manage/</guid>
      <description>JPA 영속성 관리 - 내부 동작 방식  영속성 컨텍스트  JPA에서 가장 중요한 2가지    객체와 관계형 데이터베이트 매핑하기 (Object Relational Mapping) 영속성 컨텍스트   엔티티 매니저 팩토리와 앤티티 매니저   요청이 오면 앤티티 매니저 팩토리를 통해 엔티티 매니저를 생성하고, 앤티티 매니저는 커넥션풀을 이용해 DB에 접근 합니다.
 영속성 컨텍스트    JPA를 이해하는데 가장 중요한 용어 &amp;ldquo;엔티티를 영구 저장하는 환경&amp;quot;이라는 뜻 EntitiyManager.persist(entity); // persist 메소드는 DB에 저장하는게 아니라 entity를 영속성 컨텍스트에 저장한다는 것   엔티티 매니저?</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 시작</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/start-jpa/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/start-jpa/</guid>
      <description>JPA 시작하기  Hello JPA - 프로젝트 생성  H2 Database 설치   H2 홈페이지에서 OS에 맞는 설치 파일을 다운로드한다.
  C:\Program Files (x86)\H2\bin\h2.bat 실행
  jdbc:h2:~/jpashop (최초 1회, 세션키 유지한 상태로 실행)
  이후 부터는 jdbc:h2:tcp://localhost/~/jpashop 으로 접속
  http://localhost:8082/login.jsp 에서 연결버튼 클릭
 SpringBoot 프로젝트 생성  pom.xml  hibernate와 h2database dependency 추가
 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&amp;lt;groupId&amp;gt;jpa-basic&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;ex1-hello-jpa&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.</description>
    </item>
    
    <item>
      <title>[자바 ORM 표준 JPA] JPA 소개</title>
      <link>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/about-jpa/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/develop/backend/orm-jpa-basic/about-jpa/</guid>
      <description>JPA 애플리케이션   지금 시대는 객체를 관계형 DB에 관리 객체 지향 언어를 사용한 프로젝트라고 하여도 결국엔 SQL이 제일 중요할 수 밖에 없다. 관계형 DB가 알아 들을 수 있는 것은 SQL이니까
 SQL 중심적인 개발의 문제점    무한 반복, 지루한 코드   CRUD    INSERT UPDATE SELECT DELETE 자바 객체를 SQL로 .. SQL을 자바 객체로 ..   객체 CRUD   간단히 Member라는 객체를 생성하고, sql로 CRUD를 개발하였다고 생각하자.</description>
    </item>
    
  </channel>
</rss>
