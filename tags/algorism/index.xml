<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorism on offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/tags/algorism/</link>
    <description>Recent content in Algorism on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/tags/algorism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>시각 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202104/time/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202104/time/</guid>
      <description>[문제1] 시각 ###[문제] 시각 : 문제 설명
 정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하라. 예를 들어 1을 입력했을 때
  다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다 00시 00분 03초 00시 13분 30초
  반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안 되는 시각이다 00시 02분 55초 01시 27분 45초
 ###[문제] 조건</description>
    </item>
    
    <item>
      <title>상하좌우 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202104/up-down-left-right/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202104/up-down-left-right/</guid>
      <description>[문제1] 상하좌우 ###[문제] 상하좌우 : 문제 설명
 여행가 A는 N × N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 × 1 크기의 정사각형으로 나누어져 있다. 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다. 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다
  계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다.</description>
    </item>
    
    <item>
      <title>숫자 카드 게임 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202104/games-of-number-card/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202104/games-of-number-card/</guid>
      <description>[문제1] 숫자 카드 게임 ###[문제] 숫자 카드 게임 : 문제 설명
 숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다. 단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다.
 숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열의 개수를 의미한다. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다.</description>
    </item>
    
    <item>
      <title>큰수의 법칙 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202104/law-of-large-number/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202104/law-of-large-number/</guid>
      <description>[문제1] 큰 수의 법칙 ###[문제] 큰 수의 법칙 : 문제 설명
 출제자는 큰 수의 법칙을 본인만의 방식으로 다르게 사용하고 있다. 이 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰수를 만드는 법칙이다. 단 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.
  예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자.</description>
    </item>
    
    <item>
      <title>모험가 길드 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202104/adventurer-guild/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202104/adventurer-guild/</guid>
      <description>[문제1] 1이 될때까지 ###[문제] 1이 될때까지 : 문제 설명
 어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>더하기 혹은 곱하기 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202103/sum-and-multiply/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202103/sum-and-multiply/</guid>
      <description>[문제1] 곱하기 혹은 더하기 ###[문제] 곱하기 혹은 더하기 : 문제 설명
 각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 &amp;lsquo;x&amp;rsquo; 혹은 &amp;lsquo;+&amp;rsquo; 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성. 단, + 보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정.
   예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2)x 9)x 8)x 4) = 576이다.</description>
    </item>
    
    <item>
      <title>1이 될때까지 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202103/make-one/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202103/make-one/</guid>
      <description>[문제1] 1이 될때까지 ###[문제] 1이 될때까지 : 문제 설명
 어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>거스름돈 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/algorithm/202103/reverse-charge/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202103/reverse-charge/</guid>
      <description>[문제1] 거스름돈 ###[문제] 거스름돈 : 문제 설명
 당신은 음식점의 계산을 도와주는 점원입니다. 카운트에서는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬로 줘야 할 돈은 N은 항상 10의 배수입니다.
 ###[문제] 거스름돈 : 문제 해결 아이디어
  최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐의 단위부터 돈을 거슬러 주면 됩니다. N원을 거슬러 줘야 할 때, 가장먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러줍니다.</description>
    </item>
    
    <item>
      <title>그리디 알고리즘</title>
      <link>https://offetuoso.github.io/blog/algorithm/202103/greedy-algorithm/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/202103/greedy-algorithm/</guid>
      <description>그리디 알고리즘(탐욕법) 그리디 알고리즘이란 ?  그리디 알고리즘이란
 그리디 알고리즘(탐욕법)은 현재상황에서 가장 좋은 것만 고르는 방법을 의미. 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 있는 능력을 요구. 그리디 해법은 그 정당성 분석이 중요. 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요.   [문제 상황] 루트 노드로 부터 시작하여 가는 노드의 합을 최대로 만들고 싶습니다.  Q. 최적의 해는 무엇인가요 ?</description>
    </item>
    
  </channel>
</rss>
