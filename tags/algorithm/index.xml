<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Tue, 03 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programmers 82612 부족한 금액 계산하기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-82612-calculate-the-shortfall/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-82612-calculate-the-shortfall/</guid>
      <description>Programmers - 82612 부족한 금액 계산하기 Task description 원문 : Programmers 82612 링크
 새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 이 놀이기구의 원래 이용료는 price원 인데, 놀이기구를 N 번 째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
  놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를
return 하도록 solution 함수를 완성하세요. 단, 금액이 부족하지 않으면 0을 return 하세요.</description>
    </item>
    
    <item>
      <title>Programmers 42883 큰 수 만들기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42883-make-big-numbers/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42883-make-big-numbers/</guid>
      <description>Programmers - 42883 큰 수 만들기 Task description 원문 : Programmers 42883 링크
 어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.
  예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.
  문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.</description>
    </item>
    
    <item>
      <title>Programmers 43162 네트워크</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-43162-network/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-43162-network/</guid>
      <description>Programmers - 43162 네트워크 Task description 원문 : Programmers 43162 링크
 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.
  컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</description>
    </item>
    
    <item>
      <title>Programmers 43165 타겟 넘버</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-43165-target-number/</link>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-43165-target-number/</guid>
      <description>Programmers - 43165 타겟 넘버 Task description 원문 : Programmers 43165 링크
 n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.
 -1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3  사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    
    <item>
      <title>Programmers 12906 같은 숫자는 싫어</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12906-i-hate-the-same-number/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12906-i-hate-the-same-number/</guid>
      <description>Programmers - 12906 같은 숫자는 싫어 Task description 원문 : Programmers 12906 링크
 배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,
 arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.</description>
    </item>
    
    <item>
      <title>Programmers 60057 문자열 압축</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-60057-string-compression/</link>
      <pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-60057-string-compression/</guid>
      <description>Programmers - 60057 문자열 압축 Task description 원문 : Programmers 60057 링크
 데이터 처리 전문가가 되고 싶은 &amp;ldquo;어피치&amp;quot;는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
간단한 예로 &amp;ldquo;aabbaccc&amp;quot;의 경우 &amp;ldquo;2a2ba3c&amp;rdquo;(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다.</description>
    </item>
    
    <item>
      <title>Programmers 42888 오픈 채팅방</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42888-open-chat-room/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42888-open-chat-room/</guid>
      <description>Programmers - 42888 오픈 채팅방 Task description 원문 : Programmers 42888 링크
 카카오톡 오픈채팅방에서는 친구가 아닌 사람들과 대화를 할 수 있는데, 본래 닉네임이 아닌 가상의 닉네임을 사용하여 채팅방에 들어갈 수 있다.
  신입사원인 김크루는 카카오톡 오픈 채팅방을 개설한 사람을 위해, 다양한 사람들이 들어오고, 나가는 것을 지켜볼 수 있는 관리자창을 만들기로 했다. 채팅방에 누군가 들어오면 다음 메시지가 출력된다.
 &amp;quot;[닉네임]님이 들어왔습니다.&amp;quot;  채팅방에서 누군가 나가면 다음 메시지가 출력된다.</description>
    </item>
    
    <item>
      <title>Programmers 42626 더 맵게</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42626-more-spicy/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42626-more-spicy/</guid>
      <description>Programmers - 42626 더 맵게 Task description 원문 : Programmers 42626 링크
 매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.
  섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2) Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.</description>
    </item>
    
    <item>
      <title>Programmers 17677 뉴스 클러스터링</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17677-news-clustering/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17677-news-clustering/</guid>
      <description>Programmers - 17677 뉴스 클러스터링 Task description 원문 : Programmers 17677 링크
 뉴스 클러스터링
여러 언론사에서 쏟아지는 뉴스, 특히 속보성 뉴스를 보면 비슷비슷한 제목의 기사가 많아 정작 필요한 기사를 찾기가 어렵다.
Daum 뉴스의 개발 업무를 맡게 된 신입사원 튜브는 사용자들이 편리하게 다양한 뉴스를 찾아볼 수 있도록 문제점을 개선하는 업무를 맡게 되었다.
  개발의 방향을 잡기 위해 튜브는 우선 최근 화제가 되고 있는 &amp;ldquo;카카오 신입 개발자 공채&amp;rdquo; 관련 기사를 검색해보았다.</description>
    </item>
    
    <item>
      <title>Programmers 12948 핸드폰 번호 가리기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12948-phone-number-masking/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12948-phone-number-masking/</guid>
      <description>Programmers - 12948 핸드폰 번호 가리기 Task description 원문 : Programmers 12948 링크
 프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다. 전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.
 Condition   s는 길이 4 이상, 20이하인 문자열입니다.   input output  입출력 예
    입출력 예     phone_number return   &amp;ldquo;01033334444&amp;rdquo; &amp;ldquo;*******4444&amp;rdquo;   &amp;ldquo;027778888&amp;rdquo; &amp;ldquo;*****8888&amp;rdquo;    Solution   받아온 숫자를 뒤 4번째 부터 자른다.</description>
    </item>
    
    <item>
      <title>Programmers 68644 두 개 뽑아서 더하기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-68644-take-two-and-add/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-68644-take-two-and-add/</guid>
      <description>Programmers - 68644 두 개 뽑아서 더하기 Task description 원문 : Programmers 68644 링크
 정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.
 Condition   numbers의 길이는 2 이상 100 이하입니다. numbers의 모든 수는 0 이상 100 이하입니다.   input output  입출력 예
    numbers result     [2,1,3,4,1] [2,3,4,5,6,7]   [5,0,2,7] [2,5,7,9,12]     입출력 예 설명</description>
    </item>
    
    <item>
      <title>Programmers 12973 짝지어 제거하기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12973-remove-by-pair/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-12973-remove-by-pair/</guid>
      <description>Programmers - 12973 짝지어 제거하기 Task description 원문 : Programmers 12973 링크
 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.</description>
    </item>
    
    <item>
      <title>Programmers 17681 비밀지도</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17681-secret-map/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17681-secret-map/</guid>
      <description>Programmers - 17681 비밀지도 Task description 원문 : Programmers 17681 링크
 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.
   지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 &amp;ldquo;공백&amp;rdquo;(&amp;quot; &amp;ldquo;) 또는 &amp;ldquo;벽&amp;rdquo;(&amp;quot;#&amp;quot;) 두 종류로 이루어져 있다.  전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다.</description>
    </item>
    
    <item>
      <title>Programmers 42889 실패율</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42889-failure-rate/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42889-failure-rate/</guid>
      <description>Programmers - 42889 실패율 Task description 원문 : Programmers 42889 링크
 슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.
  이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다.</description>
    </item>
    
    <item>
      <title>Programmers 17682 다트 게임</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17682-dart-game/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-17682-dart-game/</guid>
      <description>Programmers - 17682 다트 게임 Task description 원문 : Programmers 17682 링크
 카카오톡 게임별의 하반기 신규 서비스로 다트 게임을 출시하기로 했다. 다트 게임은 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임으로, 모두가 간단히 즐길 수 있다. 갓 입사한 무지는 코딩 실력을 인정받아 게임의 핵심 부분인 점수 계산 로직을 맡게 되었다. 다트 게임의 점수 계산 로직은 아래와 같다.
  다트 게임은 총 3번의 기회로 구성된다. 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.</description>
    </item>
    
    <item>
      <title>Programmers 67256 키패드 누르기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-67256-keypad-press/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-67256-keypad-press/</guid>
      <description>Programmers - 67256 키패드 누르기 Task description 원문 : Programmers 67256 링크
 스마트폰 전화 키패드의 각 칸에 다음과 같이 숫자들이 적혀 있습니다.
  이 전화 키패드에서 왼손과 오른손의 엄지손가락만을 이용해서 숫자만을 입력하려고 합니다.
맨 처음 왼손 엄지손가락은 * 키패드에 오른손 엄지손가락은 # 키패드 위치에서 시작하며, 엄지손가락을 사용하는 규칙은 다음과 같습니다.
  엄지손가락은 상하좌우 4가지 방향으로만 이동할 수 있으며 키패드 이동 한 칸은 거리로 1에 해당합니다. 왼쪽 열의 3개의 숫자 1, 4, 7을 입력할 때는 왼손 엄지손가락을 사용합니다.</description>
    </item>
    
    <item>
      <title>Programmers 42862 체육복</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42862-gym-suit/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42862-gym-suit/</guid>
      <description>Programmers - 42862 체육복 Task description 원문 : Programmers 42862 링크
 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.</description>
    </item>
    
    <item>
      <title>Programmers 81301 숫자 문자열과 영단어</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-81301-numeric-strings-and-english-words/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-81301-numeric-strings-and-english-words/</guid>
      <description>Programmers - 81301 숫자 문자열과 영단어 Task description 원문 : Programmers 81301 링크
 네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.
  다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.
 1478 → &amp;quot;one4seveneight&amp;quot;234567 → &amp;quot;23four5six7&amp;quot;10203 → &amp;quot;1zerotwozero3&amp;quot;  이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.</description>
    </item>
    
    <item>
      <title>Programmers 64061 크레인 인형 뽑기</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-64061-crane-puppet-game/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-64061-crane-puppet-game/</guid>
      <description>Programmers - 64061 크레인 인형 뽑기 Task description 원문 : Programmers 64061 링크
 게임개발자인 &amp;ldquo;죠르디&amp;quot;는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다. &amp;ldquo;죠르디&amp;quot;는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
  게임 화면은 &amp;ldquo;1 x 1&amp;rdquo; 크기의 칸들로 이루어진 &amp;ldquo;N x N&amp;rdquo; 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 &amp;ldquo;5 x 5&amp;rdquo; 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.</description>
    </item>
    
    <item>
      <title>Programmers 70128 내적</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-70128-inner-product/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-70128-inner-product/</guid>
      <description>Programmers - 70128 내적 Task description 원문 : Programmers 70128 링크
 길이가 같은 두 1차원 정수 배열 a, b가 매개변수로 주어집니다. a와 b의 내적을 return 하도록 solution 함수를 완성해주세요.
  이때, a와 b의 내적은 a[0]*b[0] + a[1]*b[1] + &amp;hellip; + a[n-1]*b[n-1] 입니다. (n은 a, b의 길이)
 Condition   a, b의 길이는 1 이상 1,000 이하입니다. a, b의 모든 수는 -1,000 이상 1,000 이하입니다.   input output    a b result     [1,2,3,4] [-3,-1,0,2] 3   [-1,0,1] [1,0,-1] -2     입출력 예 설명</description>
    </item>
    
    <item>
      <title>Programmers 42748 K번째 수</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42748-kth-number/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42748-kth-number/</guid>
      <description>Programmers - 42748 K번째 수 Task description 원문 : Programmers 42748 링크
 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.
  예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면
  array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다.</description>
    </item>
    
    <item>
      <title>Programmers 72410 신규 아이디 추천</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-72410-new-id-recommendation/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-72410-new-id-recommendation/</guid>
      <description>Programmers - 72410 신규 아이디 추천 Task description 원문 : Programmers 72410 링크
 카카오에 입사한 신입 개발자 네오는 &amp;ldquo;카카오계정개발팀&amp;quot;에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. &amp;ldquo;네오&amp;quot;에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다.
  아이디의 길이는 3자 이상 15자 이하여야 합니다. 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.</description>
    </item>
    
    <item>
      <title>Programmers 42576 완주하지 못한 선수</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42576-players-who-did-not-finish/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/programmers/programmers-42576-players-who-did-not-finish/</guid>
      <description>Programmers - 42576 완주하지 못한 선수 Task description 원문 : Programmers 42576 링크
 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.
 Condition   마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 4949 균형잡힌 세상</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-4949-a-balanced-world/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-4949-a-balanced-world/</guid>
      <description>BAEKJOON - 4949 균형잡힌 세상 Task description 원문 : 백준 4949 링크
메시지를 입력받아 괄호를 열고 닫아야 한다.
 열고 닫는 괄호가 균형 맞게 되어있으면 yes 아니면 no 출력
 ex) asd(b)dd(d[ddd]) yes ex) (asdasd] no 메시지의 끝은 .으로 끝나고 메시지가 &amp;ldquo;.&amp;rdquo; 이면 종료   Condition   모든 왼쪽 소괄호(&amp;quot;(&amp;quot;)는 오른쪽 소괄호(&amp;quot;)&amp;quot;)와만 짝을 이뤄야 한다. 모든 왼쪽 대괄호(&amp;quot;[&amp;quot;)는 오른쪽 대괄호(&amp;quot;]&amp;quot;)와만 짝을 이뤄야 한다. 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 1541 잃어버린 괄호 </title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1541-lost-parenthesis/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1541-lost-parenthesis/</guid>
      <description>BAEKJOON - 1541 잃어버린 괄호 Task description 원문 : 백준 1541 링크
 +와 -그리고 괄호를 가진 식에서 괄호를 모두 지웠다. 그리고 나서 괄호를 적절히 쳐서 이 식의 값을 최소로 만들려고 한다. 괄호를 적절히 쳐서 이 식의 값을 최소로 만드는 프로그램을 작성하시오.
 Condition   첫째 줄에 식이 주어진다. 식은 ‘0’~‘9’, ‘+’, 그리고 ‘-’만으로 이루어져 있고, 가장 처음과 마지막 문자는 숫자이다. 그리고 연속해서 두 개 이상의 연산자가 나타나지 않고, 5자리보다 많이 연속되는 숫자는 없다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 10828 스택</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-stack/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-stack/</guid>
      <description>BAEKJOON - 10828 스택 Task description 원문 : 백준 10828 링크
 정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
  명령은 총 다섯 가지이다.
  push X: 정수 X를 스택에 넣는 연산이다. pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다. size: 스택에 들어있는 정수의 개수를 출력한다. empty: 스택이 비어있으면 1, 아니면 0을 출력한다. top: 스택의 가장 위에 있는 정수를 출력한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 10872 팩토리얼</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-factorial/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-10872-factorial/</guid>
      <description>BAEKJOON - 10872 팩토리얼(Factorial) Task description 원문 : 백준 10872 링크
 0보다 크거나 같은 정수 N이 주어진다. 이때, N!을 출력하는 프로그램을 작성하시오.
 Condition   첫째 줄에 정수 N(0 ≤ N ≤ 12)가 주어진다.   input output 예제 입력 1 복사10예제 출력 1 복사3628800예제 입력 2 복사0예제 출력 2 복사1 Solution  0이면 1리턴 0이 아니면 N * factorial(N-1) 리턴 # N * (N-1)!</description>
    </item>
    
    <item>
      <title>BAEKJOON - 11729 하노이 탑 이동 순서</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-11729-hanoi-tower-travel-order/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-11729-hanoi-tower-travel-order/</guid>
      <description>BAEKJOON - 11729 하노이 탑 이동 순서(Hanoi Tower Travel Order) Task description 원문 : 백준 11729 링크
 세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 아래서 부터 큰 순서대로 쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.
이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라.
  아래 그림은 원판이 5개인 경우의 예시이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2941 크로아티아 알파벳</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2941-croatian-alphabet/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2941-croatian-alphabet/</guid>
      <description>BAEKJOON - 2941 크로아티아 알파벳(Croatian Alphabet) Task description 원문 : 백준 2941 링크
 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
    크로아티아 알파벳 변경     č c=   ć c-   dž dz=   đ d-   lj lj   nj nj   š s=   ž z=      예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2798 블랙잭</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2798-black-jack/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2798-black-jack/</guid>
      <description>BAEKJOON - 2798 블랙잭(black jack) Task description 원문 : 백준 2798 링크
  첫번째 줄은 카드의 (장)수 N과 블랙잭 넘버(목표 값) M을 입력받는다. 두번째 줄은 공백으로 구분된 N장의 카드 입력받는다. M이 넘지 않는 3장의 합중 가장 큰 경우 출력.   Condition   첫째 줄에 카드의 개수 N(3 ≤ N ≤ 100)과 M(10 ≤ M ≤ 300,000)이 주어진다. 둘째 줄에는 카드에 쓰여 있는 수가 주어지며, 이 값은 100,000을 넘지 않는 양의 정수이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 1712 손익분기점</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1712-break-even-point/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-1712-break-even-point/</guid>
      <description>BAEKJOON - 1712 손익분기점(break even point) Task description 원문 : 백준 1712 링크
 노트북 제조하는데 노트북 판매 대수에 상관없이 A만원의 고정 비용이 든다.
한 대의 노트북을 생산하는 데에는 B만원의 가변 비용이 든다
A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며,
열 대 생산하는 데는 총 1,700만원이 든다.
노트북 가격이 C만원으로 책정되었다고 한다.
생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 7578 토마토</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-7578-tomato/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-7578-tomato/</guid>
      <description>BAEKJOON - 7576 토마토(tomato) Task description  철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다.
  창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2178 미로</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2178-maze/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2178-maze/</guid>
      <description>BAEKJOON - 2606 미로(maze) Task description  N×M크기의 배열로 표현되는 미로가 있다.
1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
  미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2606 바이러스</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2606-virus/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/baekjoon-2606-virus/</guid>
      <description>BAEKJOON - 2606 바이러스(virus) Task description  신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
  예를 들어 7대의 컴퓨터가 &amp;lt;그림 1&amp;gt;과 같이 네트워크 상에서 연결되어 있다고 하자. 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다.</description>
    </item>
    
    <item>
      <title>너비 우선 탐색 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/search/bfs/bfs-algorithm/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/search/bfs/bfs-algorithm/</guid>
      <description>너비 우선 탐색 알고리즘 BFS (Breadth-First Search)  BFS는 너비 우선 탐색이라고 부르며, 시작 위치에서 가까운 노드부터 우선적으로 탐색하는 알고리즘이다.
  BFS는 큐 자료구조를 이용하며, 구체적인 동작 과정은 아래와 같다.
   탐색 시작 노드를 큐에 삽입하고 방문 처리를 합니다. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복함.     그래프를 준비하고, 시작 노드는 1로 BFS를 시작한다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 4673 셀프 넘버</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/self-number/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/self-number/</guid>
      <description>백준 4673 Self Number Task description  문제 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
  양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), &amp;hellip;과 같은 무한 수열을 만들 수 있다.
  예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 8958 OX 퀴즈</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/ox-quiz/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/ox-quiz/</guid>
      <description>백준 8958 ox quiz Task description  &amp;ldquo;OOXXOXXOOO&amp;quot;와 같은 OX퀴즈의 결과가 있다. O는 문제를 맞은 것이고, X는 문제를 틀린 것이다. 문제를 맞은 경우 그 문제의 점수는 그 문제까지 연속된 O의 개수가 된다. 예를 들어, 10번 문제의 점수는 3이 된다.
  &amp;ldquo;OOXXOXXOOO&amp;quot;의 점수는 1+2+0+0+1+0+0+1+2+3 = 10점이다.
  OX퀴즈의 결과가 주어졌을 때, 점수를 구하는 프로그램을 작성하시오.
 Condition   첫째 줄에 테스트 케이스의 개수가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있다.</description>
    </item>
    
    <item>
      <title>Codility - PermCheck</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-check/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-check/</guid>
      <description>PermCheck  Codility - Lesson4 - Counting Elements - PermCheck
 Task description  N 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다.
순열은 1부터 N까지의 각 요소를 한 번만 포함하는 시퀀스입니다. 예를 들어 배열 A는 다음과 같습니다.
  A [0] = 4A [1] = 1A [2] = 3A [3] = 2  순열이지만 배열 A는 다음과 같습니다.
  A [0] = 4A [1] = 1A [2] = 3  값 2가 없기 때문에 순열이 아닙니다.</description>
    </item>
    
    <item>
      <title>BAEKJOON - 2839 설탕배달</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/sugar-delivery/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/braekjoon/sugar-delivery/</guid>
      <description>백준 2839 설탕배달 Task description  상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
  상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
  상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.</description>
    </item>
    
    <item>
      <title>Codility - MaxCounter</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/max-counter/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/max-counter/</guid>
      <description>MaxCounter  Codility - Lesson4 - Counting Elements - MaxCounter
 Task description  처음에는 0으로 설정된 N 개의 카운터가 제공되며 두 가지 가능한 작업이 있습니다.
  증가 (X) -카운터 X가 1 증가합니다. 최대 카운터 -모든 카운터는 모든 카운터의 최대 값으로 설정됩니다. M 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다. 이 배열은 연속 작업을 나타냅니다.
  A [K] = X, 즉 1 ≤ X ≤ N이면 연산 K는 증가 (X), A [K] = N + 1이면 작업 K는 최대 카운터입니다.</description>
    </item>
    
    <item>
      <title>Codility - FrogRiverOne</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/frog-river-one/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/frog-river-one/</guid>
      <description>FrogRiverOne  Codility - Lesson4 - Counting Elements - FrogRiverOne
 Task description  은 개구리가 강 건너편으로 가고 싶어합니다. 개구리는 처음에 강의 한 둑 (위치 0)에 있으며 반대쪽 둑 (위치 X + 1)에 도달하려고합니다. 잎은 나무에서 강 표면으로 떨어집니다.
  엽을 나타내는 N 개의 정수로 구성된 배열 A가 제공됩니다. A[K]는 초 단위로 측정 된 시간 K에서 한 잎이 떨어지는 위치를 나타냅니다.
  는 개구리가 강 반대편으로 점프 할 수있는 가장 빠른 시간을 찾는 것입니다.</description>
    </item>
    
    <item>
      <title>Codility - TapeEquilibrium</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/tape-equilibrium/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/tape-equilibrium/</guid>
      <description>Tape Equilibrium  Codility - Lesson3 - Time Complexity - TapeEquilibrium
 Task description  N 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다. 0 &amp;lt;P &amp;lt;N 인 정수 P는이 배열 A를 두 부분으로 분할합니다 (A [0], A [1], &amp;hellip;, A [P − 1] 및 A [P], A [ P + 1], &amp;hellip;, A [N-1]) 분할 된 두 부분의 차이는 다음의 값입니다. | (A [0] + A [1] + &amp;hellip; + A [P − 1]) − (A [P] + A [P + 1] + .</description>
    </item>
    
    <item>
      <title>Codility - PermMissingElem</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-missing-elem/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/perm-missing-elem/</guid>
      <description>Perm Missing Elem  Codility - Lesson3 - Time Complexity - PermMissingElem
 Task description  배열 A는 1 ~ N+1의 범위의 정수를 담고 있는 배열이며 1 ~ N+1의 정수중 1개의 숫자(요소)가 빠져있다.
  예를 들면 다음과 같습니다.
  A[0] = 2A[1] = 3A[2] = 1A[3] = 5  1~5까지의 숫자중 4가 빠져 있기 때문에 4를 반환
 Condition   다음 가정에 대한 효율적인 알고리즘을 작성하십시오.</description>
    </item>
    
    <item>
      <title>Codility - Frog Jmp</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-frog-jmp/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-frog-jmp/</guid>
      <description>Frog Jmp  Codility - Lesson3 - Time Complexity - Frog Jmp
 Task description  세 개의 정수 X, Y, D를 입력받는 함수를 작성합니다.
 X는 개구리의 위치 Y는 개구리의 목표 위치 Y는 개구리의 이동거리 위치 X에서 D씩 최소의 이동을 하여 목표를 Y에 도달하거나 넘어가기 위하여 이동하는 최소 횟수 반환    예를 들면 다음과 같습니다.
  X = 10Y = 85D = 30  개구리는 다음과 같이 위치하므로 함수는 3을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>Codility - Odd Occurrences In Array</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-odd-occurrences-in-array/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-odd-occurrences-in-array/</guid>
      <description>Odd Occurrences In Array  Codility - Lesson2 - Array - Odd Occurrences In Array
 Task description  N개의 정수가 담긴 배열 A를 입력받습니다 배열에는 홀수 개의 요소가 포함됩니다. 배열의 각 요소는 짝을 이루지 않는 한 요소를 제외하고 동일한 값을 가진 다른 요소와 짝을 가지고 있습니다. 짝이 없는 요소를 찾으면 해결됩니다
  예를 들어, 주어진 A 배열은 이렇습니다.
  A [0] = 9 A [1] = 3 A [2] = 9A [3] = 3 A [4] = 9 A [5] = 7A [6] = 9   인덱스 0과 2에있는 요소의 값은 9입니다.</description>
    </item>
    
    <item>
      <title>Codility - Cyclic Rotation</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-cyclic-rotation/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/codility/codility-cyclic-rotation/</guid>
      <description>CyclicRotation  Codility - Lesson2 - Array - CyclicRotation
 Task description  N 개의 정수로 구성된 배열 A와 오른쪽으로 회전할 횟수 K가 제공됩니다. A의 각 요소가 오른쪽으로 K 번 이동합니다. N 개의 정수와 K로 구성된 배열 A가 주어지면 배열 A가 K 번 회전 된 배열을 반환합니다.
  예를 들어, 주어진
   A = [3, 8, 9, 7, 6] K = 3    함수는 [9, 7, 6, 3, 8]을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>탐색 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/search/search-algorithm/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/search/search-algorithm/</guid>
      <description>탐색 알고리즘 탐색(search)  탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는과정. 그래프 또는 트리의 자료구조에서 데이터를 찾는 문제가 주로 나온다. 대표적으로 DPS, BPS가 있으며, 원리를 제대로 이해해야 코딩테스트 문제를 풀 수 있다. 그런데 DPS와 BPS를 이해하기 위해서 기본 자료구조인 스택, 큐, 재귀 함수 등을 이해가 전제로 되어야한다.
 자료구조  자료구조란 데이터를 표현하고 관리하고 처리하기 위한 구조 스택과 큐는 삽입(Push)과 출력(Pop)이라는 두 핵심적인 함수로 구성 실제 구현할땐 오버플로우와 언더플로우를 고민해야한다.</description>
    </item>
    
    <item>
      <title>왕실의 기사 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/royal_knight/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/royal_knight/</guid>
      <description>[문제1] 왕실의 기사 [문제] 왕실의 기사 : 문제 설명  행복 왕국의 왕실 정원은 체스판과 같은 8 × 8 좌표 평면이다. 왕실 정원의 특정한 한 칸에 나이트가 서있다. 나이트는 매우 충성스러운 신하로서 매일 무술을 연마한다 나이트는 말을 타고 있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없다 나이트는 특정 위치에서 다음과 같은 2가지 경우로 이동할 수 있다
   수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기   수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기   이처럼 8 × 8 좌표 평면상에서 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 출력하는 프로그램을 작성하라.</description>
    </item>
    
    <item>
      <title>시각 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/time/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202105/time/</guid>
      <description>[문제1] 시각 [문제] 시각 : 문제 설명  정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하라. 예를 들어 1을 입력했을 때
  다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다 00시 00분 03초 00시 13분 30초
  반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안 되는 시각이다 00시 02분 55초 01시 27분 45초
 [문제] 조건  조건 풀이시간 15분 시간제한 2초, 메모리 128mb</description>
    </item>
    
    <item>
      <title>상하좌우 (구현 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202104/up-down-left-right/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/implements/202104/up-down-left-right/</guid>
      <description>[문제1] 상하좌우 [문제] 상하좌우 : 문제 설명  여행가 A는 N × N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 × 1 크기의 정사각형으로 나누어져 있다. 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다. 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다
  계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다.</description>
    </item>
    
    <item>
      <title>숫자 카드 게임 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/games-of-number-card/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/games-of-number-card/</guid>
      <description>[문제1] 숫자 카드 게임 [문제] 숫자 카드 게임 : 문제 설명  숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다. 단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다.
  숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열의 개수를 의미한다. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다.</description>
    </item>
    
    <item>
      <title>큰수의 법칙 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/law-of-large-number/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/law-of-large-number/</guid>
      <description>[문제1] 큰 수의 법칙 [문제] 큰 수의 법칙 : 문제 설명  출제자는 큰 수의 법칙을 본인만의 방식으로 다르게 사용하고 있다. 이 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰수를 만드는 법칙이다. 단 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.
  예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자.</description>
    </item>
    
    <item>
      <title>모험가 길드 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/adventurer-guild/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202104/adventurer-guild/</guid>
      <description>[문제1] 1이 될때까지 [문제] 1이 될때까지 : 문제 설명  어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>더하기 혹은 곱하기 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/sum-and-multiply/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/sum-and-multiply/</guid>
      <description>[문제1] 곱하기 혹은 더하기 [문제] 곱하기 혹은 더하기 : 문제 설명  각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 &amp;lsquo;x&amp;rsquo; 혹은 &amp;lsquo;+&amp;rsquo; 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성. 단, + 보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정.
   예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2)x 9)x 8)x 4) = 576이다.</description>
    </item>
    
    <item>
      <title>1이 될때까지 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/make-one/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/make-one/</guid>
      <description>[문제1] 1이 될때까지 [문제] 1이 될때까지 : 문제 설명  어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>거스름돈 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/reverse-charge/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/202103/reverse-charge/</guid>
      <description>[문제1] 거스름돈 [문제] 거스름돈 : 문제 설명  당신은 음식점의 계산을 도와주는 점원입니다. 카운트에서는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬로 줘야 할 돈은 N은 항상 10의 배수입니다.
 [문제] 거스름돈 : 문제 해결 아이디어   최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐의 단위부터 돈을 거슬러 주면 됩니다. N원을 거슬러 줘야 할 때, 가장먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러줍니다.</description>
    </item>
    
    <item>
      <title>그리디 알고리즘</title>
      <link>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/greedy-algorithm/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/codingtest/algorithm/greedy/greedy-algorithm/</guid>
      <description>그리디 알고리즘(탐욕법) 그리디 알고리즘이란 ?  그리디 알고리즘이란
 그리디 알고리즘(탐욕법)은 현재상황에서 가장 좋은 것만 고르는 방법을 의미. 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 있는 능력을 요구. 그리디 해법은 그 정당성 분석이 중요. 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요.   [문제 상황] 루트 노드로 부터 시작하여 가는 노드의 합을 최대로 만들고 싶습니다.  Q. 최적의 해는 무엇인가요 ?</description>
    </item>
    
  </channel>
</rss>
