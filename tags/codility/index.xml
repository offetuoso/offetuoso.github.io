<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codility on offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/tags/codility/</link>
    <description>Recent content in Codility on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/tags/codility/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Codility - PermMissingElem</title>
      <link>https://offetuoso.github.io/blog/algorithm/codility/perm-missing-elem/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/codility/perm-missing-elem/</guid>
      <description>Perm Missing Elem  Codility - Lesson3 - PermMissingElem - Frog Jmp
 Task description  배열 A는 1 ~ N+1의 범위의 정수를 담고 있는 배열이며 1 ~ N+1의 정수중 1개의 숫자(요소)가 빠져있다.
  예를 들면 다음과 같습니다.
  A[0] = 2A[1] = 3A[2] = 1A[3] = 5  1~5까지의 숫자중 4가 빠져 있기 때문에 4를 반환
 Condition   다음 가정에 대한 효율적인 알고리즘을 작성하십시오.</description>
    </item>
    
    <item>
      <title>Codility - Frog Jmp</title>
      <link>https://offetuoso.github.io/blog/algorithm/codility/codility-frog-jmp/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/codility/codility-frog-jmp/</guid>
      <description>Frog Jmp  Codility - Lesson3 - Time Complexity - Frog Jmp
 Task description  세 개의 정수 X, Y, D를 입력받는 함수를 작성합니다.
 X는 개구리의 위치 Y는 개구리의 목표 위치 Y는 개구리의 이동거리 위치 X에서 D씩 최소의 이동을 하여 목표를 Y에 도달하거나 넘어가기 위하여 이동하는 최소 횟수 반환    예를 들면 다음과 같습니다.
  X = 10Y = 85D = 30  개구리는 다음과 같이 위치하므로 함수는 3을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>Codility - Odd Occurrences In Array</title>
      <link>https://offetuoso.github.io/blog/algorithm/codility/codility-odd-occurrences-in-array/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/codility/codility-odd-occurrences-in-array/</guid>
      <description>Odd Occurrences In Array  Codility - Lesson2 - Array - Odd Occurrences In Array
 Task description  N개의 정수가 담긴 배열 A를 입력받습니다 배열에는 홀수 개의 요소가 포함됩니다. 배열의 각 요소는 짝을 이루지 않는 한 요소를 제외하고 동일한 값을 가진 다른 요소와 짝을 가지고 있습니다. 짝이 없는 요소를 찾으면 해결됩니다
  예를 들어, 주어진 A 배열은 이렇습니다.
  A [0] = 9 A [1] = 3 A [2] = 9A [3] = 3 A [4] = 9 A [5] = 7A [6] = 9   인덱스 0과 2에있는 요소의 값은 9입니다.</description>
    </item>
    
    <item>
      <title>Codility - Cyclic Rotation</title>
      <link>https://offetuoso.github.io/blog/algorithm/codility/codility-cyclic-rotation/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/codility/codility-cyclic-rotation/</guid>
      <description>CyclicRotation  Codility - Lesson2 - Array - CyclicRotation
 Task description  N 개의 정수로 구성된 배열 A와 오른쪽으로 회전할 횟수 K가 제공됩니다. A의 각 요소가 오른쪽으로 K 번 이동합니다. N 개의 정수와 K로 구성된 배열 A가 주어지면 배열 A가 K 번 회전 된 배열을 반환합니다.
  예를 들어, 주어진
   A = [3, 8, 9, 7, 6] K = 3    함수는 [9, 7, 6, 3, 8]을 반환해야합니다.</description>
    </item>
    
    <item>
      <title>Codility - Binary Gap</title>
      <link>https://offetuoso.github.io/blog/algorithm/codility/codility-binary-gap/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/algorithm/codility/codility-binary-gap/</guid>
      <description>BinaryGap  Codility - Lesson1 - Iterations - BinaryGap
 Task description   정수 N을 입력받아 2진으로 변환 후 예를 들어 N = 1041이면 함수는 5를 반환해야합니다. N은 이진 표현 10000010001 이고 따라서 가장 긴 이진 간격은 길이 5이기 때문입니다.    N = 32이면 함수는 0을 반환해야합니다. N은 이진 표현 &amp;lsquo;100000&amp;rsquo;이므로 바이너리 갭이 없습니다.
 Condition   함수 작성 : class Solution {public int solution (int N); } N은 [ 1 .</description>
    </item>
    
  </channel>
</rss>
