[{"content":"[문제1] 시각 ###[문제] 시각 : 문제 설명\n 정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하라. 예를 들어 1을 입력했을 때\n  다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다 00시 00분 03초 00시 13분 30초\n  반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안 되는 시각이다 00시 02분 55초 01시 27분 45초\n ###[문제] 조건\n 조건 풀이시간 15분 시간제한 2초, 메모리 128mb\n  입력 첫째 줄에 정수 N이 입력된다.(0\u0026lt;=N\u0026lt;=23)\n  출력 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 출력한다.\n  입력예시 5\n  출력예시 11475\n 아이디어  복잡하게 생각할 필요없이 하루는 86,400초로 00시00분00초 -\u0026gt; 23시59분59초 까지 모든 경우는 86,400로 경우의 수가 100,000 개도 되지 않기 때문에 모든 초를 센다 하여도 2초가 넘지 않는다.\n  모든 초를 조회하는 완전탐색 유형으로 생각하면된다.\n  모든 시간 분 초를 순회하며, 합쳐서 문자로 합쳐서 포함 여부를 조회한다.\n  파이썬 if(\u0026lsquo;3\u0026rsquo; in str(hour)+str(minute)+str(second)) : #활용\n  자바 if((\u0026quot;\u0026quot;+hour+minute+second).contains(\u0026ldquo;3\u0026rdquo;)){} //활용\n ###time1.py\nn = int(input())\rcount, hour, minute, second = 0, 0, 0, 0\rwhile True :\rif('3' in str(hour)+str(minute)+str(second)):\rcount += 1\rsecond += 1\rif second == 60 :\rminute += 1\rsecond = 0\rif minute == 60 :\rhour += 1\rminute = 0\rif hour == n+1 :\rbreak\rprint(count)  파이썬 모범답안 n = int(input())\rresult = 0;\rfor h in range(n+1) :\rfor m in range(60) :\rfor s in range(60) :\rif('3' in str(h)+str(m)+str(s)) :\rresult += 1\rprint(result)\r ###Time.java\npackage ex.algorism.implement;\rimport java.util.Scanner;\rpublic class Time{\rpublic static void main(String args[]) {\rScanner sc = new Scanner(System.in);\rint n = sc.nextInt();\rint hour = 0;\rint minute = 0;\rint second = 0;\rint count = 0;\rwhile (true) {\rif((\u0026quot;\u0026quot;+hour+minute+second).contains(\u0026quot;3\u0026quot;)) {\rcount++;\r}\rsecond++;\rif(second == 60){\rminute ++;\rsecond = 0;\r}\rif(minute == 60){\rhour ++;\rminute = 0;\r}\rif(hour == n+1){\rbreak;\r}\r}\rSystem.out.println(count);\r}\r}\r 이 자료는 나동빈님의 이코테 저서를 보고 정리한 자료입니다.\n","description":"코딩테스트 구현 알고리즘 시각","id":0,"section":"blog","tags":["Algorism","Implementation","이코테"],"title":"시각 (구현 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202104/time/"},{"content":"##Grammar Error: Bring the deep sea water - Use the sea water - Transform the sea water to freshwater You/we could transform ~. The scientists could/can make freshwater out of human urine We could make freshwater with an icecap; We could make freshwater out of the ice caps using a filter system.\n##New expressions learned today: busy I had a hectic schedule. → It’s a little hectic. ; I had a hectic day. undergraduate 학부 - graduate 대학원 I’m an undergraduate student studying ~. I studied ( ) in the undergraduate course. I got my bachelor degrees for ( ). I majored ( ) in my undergraduate course. sea 바다 - ocean 해양 - shore 해변가; beach 해변 make cheese out of milk. -\u0026gt; make cheese with milk. make greek yogurt with milk. out of nowhere come up (with) sth(idea) It just popped up in my mind. The scientists came up with the technology to make freshwater out of urine. The idea of combining the mp3 and a phone came up to Steve Jobs. Steve Jobs came up with the idea of ~.\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":1,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.30","uri":"https://offetuoso.github.io/blog/english/202104/20210430-english-speak/"},{"content":"##Grammar Error: Instead, I drinking a lot of coffee → Instead, I drink a lot of coffee. Green Tea with an extra espresso shot I’ll have an Americano with three shots. / I’ll have an Americano with an extra shot. extra large - extra small That includes coffee. → Yes, I think coffee is included. / Yes, 1.5 coffee and water all together. If all freshwater is gone, then I would export water from trees or fruits. → extract I’m going to sleep during lunchtime. I’ll skip lunch for tomorrow. I would study harder if I were you.\n##New expressions learned today: Kihun is drinking a coke. → I drank that yesterday. : Yesterday, I drank the same coke [Kihun is drinking now]. I guess I was drunk last night. That drunken man seems a little dangerous. hydrate (v) → hydrated (a) desperate feel uneasy\n feverishly molecule dehydration - hydrate lubricate lack of muscle spasms priority delirium digestion increase – decrease crops contaminate  본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":2,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.29","uri":"https://offetuoso.github.io/blog/english/202104/20210429-english-speak/"},{"content":"[문제1] 상하좌우 ###[문제] 상하좌우 : 문제 설명\n 여행가 A는 N × N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 × 1 크기의 정사각형으로 나누어져 있다. 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다. 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다\n  계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다. 각 문자의 의미는 다음과 같다\n  L: 왼쪽으로 한 칸 이동 R: 오른쪽으로 한 칸 이동 U: 위로 한 칸 이동 D: 아래로 한 칸 이동\n  이때 여행가 A가 N × N 크기의 정사각형 공간을 벗어나는 움직임은 무시된다 예를 들어 (1, 1)의 위치에서 L 혹은 U를 만나면 무시된다 다음은 N = 5인 지도와 계획이다\n ###[문제] 조건\n 조건 풀이시간 15분 시간제한 1초, 메모리 128mb\n  입력 첫째 줄에 공간의 크기를 나타내는 N이 주어집니다. (1\u0026lt;=N\u0026lt;=100) 둘째 줄에 여행가 A가 이동할 계획서 내용이 주어집니다. (1\u0026lt;=이동 횟수\u0026lt;=100)\n  출력 첫째 줄에 여행가 A가 최종적으로 도착할 지점의 좌표(X,Y)를 공백으로 구분하여 출력한다.\n  입력예시 5 R R R U D D 출력예시 3 4\n ###up-down-left-right1.py\nn = int(input()) # map의 최대 크기\rm = list(map(str, input().split())) #공백으로 구분된 이동플랜\rx, y = 1, 1\t# 시작위치\rfor move in m: # 입력받은 이동 커맨드\rif (move == \u0026quot;U\u0026quot;) and (x - 1) \u0026gt; 0: # U (x-1, y)를 x-1이 1보다 작아지지 않는 선에서 수행 x -= 1\relif (move == \u0026quot;D\u0026quot;) and (x + 1) \u0026lt;= n : # D (x+1, y)를 x+1이 n보다 커지지 않는 선에서 수행 x += 1\relif (move == \u0026quot;L\u0026quot;) and (y - 1) \u0026gt; 0: # L (x, y-1)를 y-1이 1보다 작아지지 않는 선에서 수행 y -= 1\relif (move) == \u0026quot;R\u0026quot;) and (y + 1) \u0026lt;= n : # R (x, y+1)를 y+1이 n보다 커지지 않는 선에서 수행 y += 1\rprint(x,' ',y)  ###up-down-left-right1.py\nn = int(input())\rm = input().split()\rx, y = 1, 1\rmove_type = ['U','D','L','R']\rdx = [-1, +1, 0, 0]\rdy = [0, 0, -1, +1]\rfor move in m:\rfor i in range(0, len(move_type)) :\rif move == move_type[i] :\rif( 1 \u0026lt;= x+dx[i] \u0026lt;= n and 1 \u0026lt;= y+dy[i] \u0026lt;= n ) :\rx += dx[i]\ry += dy[i]\rprint(x,' ',y)\r 이 자료는 나동빈님의 이코테 저서를 보고 정리한 자료입니다.\n","description":"코딩테스트 구현 알고리즘 상하좌우","id":3,"section":"blog","tags":["Algorism","Implementation","이코테"],"title":"상하좌우 (구현 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202104/up-down-left-right/"},{"content":"##Grammar Error:\nI make one sentence and still thinking. → I made one sentence and I’m still working on another. I’m still working on it. → Are you still working on the project? HW1. After sixteen (16) generations, (?). # of miles → the first group of mice ran on the wheel for an average of seven miles, but the second group ran for four miles on average. 나는 평균적으로 하루 세 끼를 먹는다. (eat # times; have # meals) → I eat three times a day on average. 횟수 + a day/week/month… = four hours a day, fiftytwo hours a week, two hours a week, 나는 하루에/매일 평균 4시간씩 공부한다. (study for 시간) → I study for an average of four hours a day;everyday. HW2. What is the \u0026ldquo;couch-potato\u0026rdquo; gene? → People who like staying on the couch / like to stay on the couch → The couch-potato gene is to inherit lazy gene to next generations. → The couch-potato gene inherits lazy characteristics to next generations. tend to → tendency; → The couch-potato gene means that couch-potato people could be lazy genetically; could have been born lazy; could have been born not as an outdoor person. I think solution is go out and exercise. → I think the solution is to go out and exercise. Or you could get rid of the TV (to get yourself more outdoors). I’m an outdoor person. You need to go outdoors more often. indoor vs. outdoor → I’m in between an indoor and outdoor person.; I like being both indoor and outdoor.\ntrash, garbage (n) My mom tells me to get rid of the skateboard and bicycle equipments.\n##New expressions learned today: confident (a) 자신있는 → confidence (n) 자신감 more and less → lessen (v) 줄이다 =/= lesson\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":4,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.23","uri":"https://offetuoso.github.io/blog/english/202104/20210423-english-speak/"},{"content":"##Grammar Error:\nSame as/with last week; (same) as usual Same old days. I hear of → I have heard of ~ I find it. - search - I’ll look it up on the dictionary. I’m looking for sth. / Are you looking for sth? I found it! Do you like RDJ? / Who’s that? I’ll look him up right now. I looked up the word on the dictionary. What is the word that you looked up on the search engine most recently? It was (word). I looked it up (time). → It was The Language of Python and I looked it up an hour ago. I look things up on Google a lot. Dopamine system is achievement of brain that Dopamine system is pleasure signal. → Dopamine system is a part of the brain that sends pleasure signals. → Dopamine system sends pleasure signals. After 10 generations, part one; the first group of mice that exercised had an increased physical activity, but the second group that didn’t exercise didn’t show a significant positive change. significant 상당한\n##New expressions learned today: statistics 통계; research results semantic (linguistics);\nsearch engine = Google, Naver The search engine I use the most is Google. Recent (a) 최근 I recently started to learn English in (from) March. 최근에 mice (pl) = mouse (sg) rodent 설치류 - generation 시대; 세대 respond 대답; 반응하다 → response (n) Her response was out of expectation. What would be your response to this question? c.f. answer vs. response separate based on ~에 기초하여 / ~에 따라 base (n) 기초, 기본, 근간/밑바탕 c.f. basement 지하실, apartment 아파트\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":5,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.22","uri":"https://offetuoso.github.io/blog/english/202104/20210422-english-speak/"},{"content":"[문제1] 숫자 카드 게임 ###[문제] 숫자 카드 게임 : 문제 설명\n 숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다. 단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다.\n 숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열의 개수를 의미한다. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다. 따라서 처음에 카드를 골라낼 행을 선택할 때, 이후에 해당 행에서 가장 숫자가 낮은 카드를 뽑을 것을 고려하여 최종적으로 가장 높은 숫자의 카드를 뽑을 수 있도록 전략을 세워야 한다.    모든 행을 순회 하여, 행의 가장 작은 수중에 가장큰 수를 찾기\n  카드들이 N X M 형태로 놓여 있을 때, 게임의 룰에 맞게 카드를 뽑는 프로그램을 만드시오.\n ###[문제] 조건\n 조건 시간 1초, 메모리 120mb\n  입력조건 첫째 줄에 숫자 카드들이 놓인 행의 개수 N과 열의 개수 M이 공백을 기준으로 하여 각각 자연수로 주어진다. (1 \u0026lt;= N,M \u0026lt;= 100) 둘째 줄부터 N개의 줄에 걸쳐 각 카드에 적힌 숫자가 주어진다. 각 숫자는 1 이상 10,000 이하의 자연수이다.\n  출력조건 첫째 줄에 게임의 룰에 맞게 선택한 카드에 적힌 숫자를 출력한다\n  입력예시 3 3 3 1 2 4 1 4 2 2 2\n  출력예시 2\n  입력예시 2 4 7 3 1 8 3 3 3 4\n  출력예시 3\n 아이디어  각 행마다 가장 작은 수를 찾은 뒤에 그 수 중에서 가장 큰 수 찾기 list에서 가장 작은 원소를 찾아주는 min() 함수 이용 입력 파라메터 중에서 가장 큰 원소를 찾아주는 max(a, b) 함수 이용\n ###game_of_number_card.py\nn, m = map(int, input().split())\rresult = 0\rfor i in range(n):\rdata = list(map(int, input().split()))\rminumum = min(data)\rresult = max(result, minumum)\rprint(result)  GameOfCard.java package ex.algorism.greedy;\rimport java.util.Arrays;\rimport java.util.Scanner;\rpublic class GameOfCard {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rint result = 0;\rString n = sc.nextLine();\rString m = null;\rString arr[] = n.split(\u0026quot; \u0026quot;);\rint maximum = 0;\rfor (int i = 0; i \u0026lt; Integer.parseInt(arr[0]); i++) {\rm = sc.nextLine();\rString row[] = m.split(\u0026quot; \u0026quot;);\r//자바 String배열 -\u0026gt; int배열로 변경 Java8 기준\rint[] nums = Arrays.asList(row).stream().mapToInt(Integer::parseInt).toArray();\r/*\rint[] nums = new int[row.length];\rfor(int j=0; j\u0026lt;row.length; j++) {\rnums[j] = Integer.parseInt(row[j]);\r}\r*/\rArrays.sort(nums);\rif(maximum \u0026lt; nums[0]) {\rmaximum = nums[0];\r}\r}\rSystem.out.println(maximum);\r}\r}\r 파이썬 모범답안 1 #n, m을 공백으로 구분하여 입력받기\rn, m = map(int, input().split())\rresult = 0\r#한 줄씩 입력받아 확인\rfor i in range(n):\rdata = list(map(int, input().split(\u0026quot; \u0026quot;)))\r# 현재 줄에서 '가장 작은 수' 찾기\rmin_value = min(data)\r# '가장 작은 수'들 중에서 가장 큰 수 찾기\rresult = max(result, min_value)\rprint(result)\r 파이썬 모범답안 2 #n, m을 공백으로 구분하여 입력받기\rn, m = map(int, input().split())\rresult = 0\r#한 줄씩 입력받아 확인\rfor i in range(n):\rdata = list(map(int, input().split()))\rmin_value = 10001\r#현재 줄에서 '가장 작은 수' 찾기\rfor a in data :\rmin_value = min(min_value, a)\r#'가장 작은 수 중'에서 가장 큰 수 찾기 result = max(result, min_value)\rprint(result)\r 이 자료는 나동빈님의 이코테 저서를 보고 정리한 자료입니다.\n","description":"코딩테스트 숫자 카드 게임","id":6,"section":"blog","tags":["Algorism","Greedy","이코테"],"title":"숫자 카드 게임 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202104/games-of-number-card/"},{"content":"[문제1] 큰 수의 법칙 ###[문제] 큰 수의 법칙 : 문제 설명\n 출제자는 큰 수의 법칙을 본인만의 방식으로 다르게 사용하고 있다. 이 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰수를 만드는 법칙이다. 단 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.\n  예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자. 이 경우 특정한 인덱스의 수가 연속해서 세 번까지만 더해질 수 있으므로 큰 수의 법칙에 따른 결과는 6+6+6+5+6+6+6+5인 46이 된다.\n  배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K가 주어질 때 출제자의 큰 수의 법칙에 따른 결과를 출력하시오\n ###[문제] 조건\n 조건 시간 1초, 메모리 120mb\n  입력조건 첫째 줄에 N(2 \u0026lt;= N \u0026lt;= 1,000), M(1 \u0026lt;= M \u0026lt;= 10,000), K(1 \u0026lt;= K \u0026lt;= 10,000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다. 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1 이상 10,000 이하의 수로 주어진다. 입력으로 주어지는 K는 항상 M보다 작거나 같다\n  출력조건 첫째 줄에 큰 수 의 법칙에 따라 더해진 답을 출력한다\n  입력예시 5 8 3 2 4 5 4 6\n  출력예시 46\n 아이디어  최초 while 안에 k번의 반복문을 두어 큰수를 반복시키려고 했다만 문제 조건의 시간과 메모리의 조건이 있어 최대 입력값인 1000, 10000, 10000 이라면 열심히 풀고도 오답이 나올것이다.\n  n m k 5 7 2 2 1 5 4 3\n  {5, 5, 4, 5, 5, 4, 5}\n  코딩문제인줄 알았으나 수열문제 였다. 일단 5의 갯수를 세어 count * 5로 반복문 없이 계산을 하려한다.\n  첫번째로 반복되는 수열중 5의 갯수를 구하는 법이다. 반복되는 5, 5, 4는 (k+1) 3이며 전체의 총 개수에서 몇번 사용할 수 있는지 생각해 보면 m // (k+1) 몫은 2가 나온다. 여기에 k를 다시 곱해준다 (m // (+1) 2)*k 여기까지 계산하면 반복되는 수열중의 제일 큰 수를 계산한다.\n  하지만 수열에 포함되지 않은 5의 갯수를 더해줘야한다. 딱 나눠떨어지면 0, 나머지가 있다면 나머지 만큼의 5를 더해 줘야한다. 여기에 자주 쓰이는 % 연산자가 있다\n  m % (k+1) 으로 1이나온다. 나머지의 갯수를 계산하는 식 m % (k+1)\n  count = (m // (+1) 2)*k count += m % (k+1)\n  이렇게 하면 {(5), (5), 4, (5), (5), 4, (5)} 5의 개수를 얻었고 이제 4의 개수를 얻어보자 아까 구했던 수열이 반복되는 (m // (k+1)) 만큼 4를 곱해준다\n  count2 = (m // (k+1)) 나머지는 2번째 수가 나오지 못하여, 몫으로 안떨어지고 나머지가 된것이기 때문에 2번째 큰수는 나머지 추가로 더해줄게 없다\n  result = (count첫번째큰수)+(count2두번째큰수)\n ###law_of_large_number.py\nn, m, k = map(int, input().split()) l = list(map(int, input().split()));\rl.sort();\rfirst = l[n-1] second = l[n-2]\rcount = (m // (k+1))*k count += m % (k+1)\rcount2 = (m // (k+1)) #m-count\rresult = (count*first) + (count2*second)\rprint(result)\r ###LawOfLargeNumber.java\npackage ex.algorism.greedy;\rimport java.util.Arrays;\rimport java.util.Collections;\rimport java.util.Scanner;\rpublic class LawofLargeNumber {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rint result = 0;\rString str1 = sc.nextLine();\rString str2 = sc.nextLine();\rint n = Integer.parseInt(str1.split(\u0026quot; \u0026quot;)[0]);\rint m = Integer.parseInt(str1.split(\u0026quot; \u0026quot;)[1]);\rint k = Integer.parseInt(str1.split(\u0026quot; \u0026quot;)[2]);\rString list[] = str2.split(\u0026quot; \u0026quot;);\rArrays.sort(list);\rint first = Integer.parseInt(list[n-1]);\rint second = Integer.parseInt(list[n-2]);\r//System.out.println(\u0026quot;n\u0026quot;+n);\r//System.out.println(\u0026quot;m\u0026quot;+m);\r//System.out.println(\u0026quot;k\u0026quot;+k);\r//System.out.println(\u0026quot;first\u0026quot;+first);\r//System.out.println(\u0026quot;second\u0026quot;+second);\r//5 5 4 5 5 4 5\rint count = (m/(k+1))*k;\rcount += m%(k+1);\rint count2 = m-count; //System.out.println(count);\rresult = (count*first) + (count2*second);\rSystem.out.println(result);\r}\r}\r 이 자료는 나동빈님의 이코테 저서를 보고 정리한 자료입니다.\n","description":"코딩테스트 큰수의 법칙","id":7,"section":"blog","tags":["Algorism","Greedy","이코테","수열"],"title":"큰수의 법칙 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202104/law-of-large-number/"},{"content":"##Grammar Error:\npeople has long sleep is dangerous → It is dangerous to sleep too much; Having too much sleep is dangerous. 7-9 hours are recommended for the average adult to sleep. No, it’s not. Because too many sleep leads to high mortality risk. → Because too much sleep leads to high mortality risk. People they too much sleep and too little sleep that leads to high mortality risk. → Both lack of sleep and oversleep leads to high mortality risk. The first explanation was that some people might suffer from diseases, which leads to longer sleeping time. The second explanation was that people who suffer from the poor quality of sleep might try to overcome their problem with large quantities of sleep.\n##New expressions learned today: subtitles 자막 Did you watch the video with subtitles on? No, I didn’t; No, I watched it without any subtitles.\nquality 질 vs. quantity 양 It is the quality of sleep that is important, not the quantity. Both quality and quantity is important when you study. quality - high vs. low quantity - small amount, large amount former vs. latter → You have two options: to drink a bottle of water at once or to have no water at all. Which do you choose, the former or the latter? → I choose the former option. suffer from + NEGATIVE people might suffer from diseases and illness. He suffered from the loss of his parents. Children are still suffering from poverty. overcome 극복하다 I am really proud of you trying to overcome your trauma. People tend to sleep longer to overcome their low-quality sleep. overcome A with B = A로 B를 극복하다\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":8,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.09","uri":"https://offetuoso.github.io/blog/english/202104/20210409-english-speak/"},{"content":"##Grammar Error:\nIt was so funny and also sad. → It was really entertaining and the storyline was also a bit sad/touching. These days (Nowadays) , I go to bed in 1 am and (get up) 7 am → at + time When I weekend, then I get up at 1pm but I still go to bed at 1 am. → On weekends, I get up at 1 pm and still go to bed the same. 9 o’clock → 9 hours weak insomnia. When I very tired, then has insomnia. → I have a hard time falling asleep quickly, especially when I’m very tired. I always a little tired and I drinking a lot of coffee. → I am always a little tired and I drink a lot of coffee. I watch Netflix a lot. I had drinking a lot of coffee. have V-ing. → have been V-ing I have been learning English for three weeks. I have tried watching Mr. Sunshine, but it’s not my style. Have you tried bungee jumping? No, I haven’t. be V-ing. ; I am drinking a coffee, I am trying to get some sleep, I am learning English (I’m learning how to speak in English), I am having a talk with Kihun. c.f. how I can get to 안양천, how to get to 안양천 She is having a rest → She is taking a rest. What are you doing? → I am doing ~.\n##New expressions learned today: remain 남다, remaining 남아있는 the question remains = there lies the question, the question is “-” The remaining amount recommend (v) → recommended (a) 1. 추천하다 (추천하는), 2. 권장하다 (권장되는) recommended posts, groups that are relative to you I really/strongly recommend ~. (I strongly recommend (watching) Mr. Sunshine) The recommended amount of _____. influence (v) → have an influence on sth have a hard time V-ing I have a hard time speaking English fluently. When I was in middle school, I had a hard time getting up early. When I was a high school student, I had a hard time studying at school. frustrating (a) This problem set is so frustrating. Coding is so frustrating. / Coding really frustrates me.\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":9,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.08","uri":"https://offetuoso.github.io/blog/english/202104/20210408-english-speak/"},{"content":"##Grammar Error:\nI go to the workspace and → I went to the company and there were flowers (cherry blossoms) on the side of the roads nearby the company building.\nNew expressions learned today: strategy (n) 요령 → 전략 skills vs. strategies purpose 목적 Which subway station should I go to / to get to 안양천? Could you tell me how to spell it?\nExcuse me, how can I get to the (location)? Can I ask you a question? Do you know where (location) is? Can you tell me where the bus station is? / how I can get to (location)? Can you tell me how I can use this machine? Can you tell me how to use this machine? I’d like to know how to get to the (location). Pardon me for asking, but \u0026hellip;\n본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":10,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.07","uri":"https://offetuoso.github.io/blog/english/202104/20210407-english-speak/"},{"content":"[문제1] 1이 될때까지 ###[문제] 1이 될때까지 : 문제 설명\n 어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.\n   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다. 결과적으로 이경우 전체과정을 실행한 횟수는 3이된다. 이는 N을 1로 만드는 최소 횟수이다. N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야하는 최소 횟수를 구하는 프로그램을 작성하시오\n ###[문제] 조건\n 입력조건 첫째줄에 N(2 \u0026lt;= N \u0026lt; = 100000)과 K(2 \u0026lt;= K \u0026lt; = 100000)가 공백으로 구분되며 각각 자연수로 주어진다. 이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.\n  출력조건 첫째줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.\n  입력예시\n25 5\n  출력예시\n2\n ###make_one.py\nn, k = map(int, input().split()) #n=13, k=5\rresult = 0\rwhile True :\r# n을 K로 나눈 몫에 k를 곱하여,\r# 나눌수 있는 값을 계산 # roof 1 step # roof 2 step\rtarget = (n // k) * k #target = 10 #target = 0\rresult += (n - target) #result += 3 \u0026lt;\u0026lt;한번에 카운트 3을 추가하고 #result(4) += 2\rn = target #n = target \u0026lt;\u0026lt;13을 10으로 만듬 #n=0\rif n \u0026lt; k : #false #true\rbreak\rresult += 1\t#나눗셈에 대한 result(3) +1\tn //= k\t#n = 2\rresult += (n - 1) #result(6) += -1 \u0026lt;n을 0까지 만들면서, 횟수 -1\rprint(result) #5  ###MakeOne.java\npackage ex.algorism.greedy;\rimport java.util.Scanner;\rpublic class MakeOne {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rint n = sc.nextInt();\rint k = sc.nextInt();\rint result = 0;\rwhile (true) {\rint target = (n/k)*k;\rresult += n-target;\rn = target;\rif(n \u0026lt; k) {\rbreak;\r}\rn = n / k;\rresult++;\r}\rresult += (n-1);\rSystem.out.println(result);\r}\r}\r ###[문제] 정당성 분석\n 1을 빼는 것보다 나누는 것이 더 기하급수적으로 빠르게 줄일 수 있다. K가 2보다 크다면, K로 나누는 것이 1을 빼는것 보다 항상 빠르게 N을 줄일 수 있다. 또한 N은 항상 1에 도달하게 됨.\n 이 자료는 나동빈님의 이코테 유튜브 영상을 보고 정리한 자료입니다. 참고 : www.youtube.com/watch?v=m-9pAwq1o3w\u0026amp;amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC\n","description":"모험가 파티를 만드는 알고리즘","id":11,"section":"blog","tags":["Algorism"],"title":"모험가 길드 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202104/adventurer-guild/"},{"content":"##have influence on ~ ('-에 영향을 미치다')\n 동학개미 had some influence on the national stock market. (\u0026lsquo;동학 개미는 전국 주식 시장에 영향을 미쳤습니다.') I think, he has achievement that influence on some developer (\u0026lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.') I think, his achievement has some influence on [software developers/engineers.] (\u0026lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.') Netflix now has a huge influence on the media industry. (\u0026lsquo;Netflix는 이제 미디어 산업에 큰 영향력을 미치고 있습니다. \u0026lsquo;)\n say/ speak/ talk/ tell \u0026gt;\tsay (말하는 내용에 집중) 말하다\r- \u0026quot;i'm so tired \u0026quot; he said. (그가 \u0026quot;나는 피곤해\u0026quot; '라고 말했다')\r\u0026gt;\tspeak (1.말하는 행위, 2.언어를 사용할 수 있는 능력)말하다\r1. The teacher will speak about the test tomorrow (1. 선생님은 내일 시험에 대해 말할 것입니다)\r2. I can speak English (2. 나는 영어를 사용할 수 있습니다)\r\u0026gt; talk (말을 주고 받는 행위) 이야기하다, 말하다\r-\the talks too much (그는 말이 너무 많다)\r- We talked about the our future (우리는 우리의 미래에 대하여 이야기 했습니다)\r\u0026gt; tell (말하는 대상과 내용에 초점) 말하다 -\tI'll tell you what happened. (무슨 일이 있었는지 말씀 드리겠습니다.)\r 각 동사마다 표현하는 방법이 다르다 \u0026gt;\tsay\r1. 말하는 내용은 that\r- I say \u0026lt;mark\u0026gt;(that)\u0026lt;/mark\u0026gt; ~ (that 생략가능)\r2. 말하는 대상은 전치사 to 사용 - I say that ~ \u0026lt;mark\u0026gt;to\u0026lt;/mark\u0026gt; you (to를 붙여서 말하는 대상 추가)\r\u0026gt;\tspeak /talk\r1. 말하는 내용은 about\r- We speak \u0026lt;mark\u0026gt;about\u0026lt;/mark\u0026gt; the money\r- We talk \u0026lt;mark\u0026gt;about\u0026lt;/mark\u0026gt; the money\r2. 말하는 대상은 to 사용\r- They speak to me about the money\r- please talk to me about the money\r\u0026gt;\ttell *tell은 말하는 대상과 내용이 다 나와야 합니다\r1. 대상 tell [내용/명사] / 대상 tell about [내용/명사] 3형식 - she tells me the our future\r- they told him their product\r- she tells me about the our future\r- they told him about their product\r2. tell (대상) that (내용, 문장 형태(Phrase, 구))\r*내용이 ‘누가 뭘 했다’ 등 긴 내용을 말할 때 사용. (주어와 동사 필요)\r– Paul tells me that he likes to visit the new house.\r– They told him that they didn’t buy it.\r3. tell (대상) to do (something)\r*이 경우에는 주로 ‘(누구)에게 (무엇을 하라고)명령하다’라는 뜻으로 사용됩니다.\r– Paul tells me to clean my room.\r– They told him to show them his ID card.\r 전치사를 사용한 표현 \u0026gt;\t1. talk over: ~에 대해 (깊이) 이야기 하다\r– We talked over the new project.\r– Jason talked over his plan to Paris. \u0026gt;\t2. talk (대상) into (동명사): ~하도록 설득하다\r– He talked me into buying his new painting.\r– She talked him into sending a letter.\t say-speak-talk-tell은 아래 홈페이지에서 참조\r참고 : http://cafeclass.kr/say-speak-talk-tell-%EC%B0%A8%EC%9D%B4/\rAmerica(US)\u0026rsquo;s third gender \u0026gt; 1. He\r2. She\r3. Them\r plural (\u0026lsquo;복수형 more than one\u0026rsquo;) - adv. the first person plural\r- n. the first person plural\r singular (\u0026lsquo;단수형 one\u0026rsquo;) - adv. the third person singular form of the verb\r- n. the first person singular\r pass down (\u0026lsquo;전달받다, 물려받다\u0026rsquo;) (casual)  One of the parents’ family names is passed down to the child in Korea. (\u0026lsquo;한국에서는 부모의 성이 아이에게 전해집니다.')\n inherit (\u0026lsquo;상속하다\u0026rsquo;) (formal)  Instead of inheriting all the financial assets to his children, he donated 70% to the society. (\u0026lsquo;모든 금융 자산을 자녀들에게 물려주는 대신 사회에 70 %를 기부했습니다.')\n refer to (\u0026lsquo;인용하다\u0026rsquo;)  he was refer to sentence of poem (\u0026lsquo;그는시의 문장을 언급했다\u0026rsquo;)\n n. ancestor (\u0026lsquo;선조\u0026rsquo;) n. descendent (\u0026lsquo;후손\u0026rsquo;) \u0026gt; (de/di- : minus, later → decline, diminish)\r n. occupation (\u0026lsquo;직업\u0026rsquo;) prince and princess → princes and princesses (plural -es: is) 발음주의 연도읽기   1908 - nineteen-o-eight \u0026gt; nineteen-hundred and eight - The Olympics was held in Pyeongchang in 2018. - 2582 B.C. 2080, 2090   본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":12,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.02","uri":"https://offetuoso.github.io/blog/english/202104/20210402-english-speak/"},{"content":"##have influence on ~ ('-에 영향을 미치다')\n 동학개미 had some influence on the national stock market. (\u0026lsquo;동학 개미는 전국 주식 시장에 영향을 미쳤습니다.') I think, he has achievement that influence on some developer (\u0026lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.') I think, his achievement has some influence on [software developers/engineers.] (\u0026lsquo;그는 일부 개발자에게 영향을 미치는 업적을 가지고 있다고 생각합니다.') Netflix now has a huge influence on the media industry. (\u0026lsquo;Netflix는 이제 미디어 산업에 큰 영향력을 미치고 있습니다. \u0026lsquo;)\n say/ speak/ talk/ tell \u0026gt;\tsay (말하는 내용에 집중) 말하다\r- \u0026quot;i'm so tired \u0026quot; he said. (그가 \u0026quot;나는 피곤해\u0026quot; '라고 말했다')\r\u0026gt;\tspeak (1.말하는 행위, 2.언어를 사용할 수 있는 능력)말하다\r1. The teacher will speak about the test tomorrow (1. 선생님은 내일 시험에 대해 말할 것입니다)\r2. I can speak English (2. 나는 영어를 사용할 수 있습니다)\r\u0026gt; talk (말을 주고 받는 행위) 이야기하다, 말하다\r-\the talks too much (그는 말이 너무 많다)\r- We talked about the our future (우리는 우리의 미래에 대하여 이야기 했습니다)\r\u0026gt; tell (말하는 대상과 내용에 초점) 말하다 -\tI'll tell you what happened. (무슨 일이 있었는지 말씀 드리겠습니다.)\r 각 동사마다 표현하는 방법이 다르다 \u0026gt;\tsay\r1. 말하는 내용은 that\r- I say \u0026lt;mark\u0026gt;(that)\u0026lt;/mark\u0026gt; ~ (that 생략가능)\r2. 말하는 대상은 전치사 to 사용 - I say that ~ \u0026lt;mark\u0026gt;to\u0026lt;/mark\u0026gt; you (to를 붙여서 말하는 대상 추가)\r\u0026gt;\tspeak /talk\r1. 말하는 내용은 about\r- We speak \u0026lt;mark\u0026gt;about\u0026lt;/mark\u0026gt; the money\r- We talk \u0026lt;mark\u0026gt;about\u0026lt;/mark\u0026gt; the money\r2. 말하는 대상은 to 사용\r- They speak to me about the money\r- please talk to me about the money\r\u0026gt;\ttell *tell은 말하는 대상과 내용이 다 나와야 합니다\r1. 대상 tell [내용/명사] / 대상 tell about [내용/명사] 3형식 - she tells me the our future\r- they told him their product\r- she tells me about the our future\r- they told him about their product\r2. tell (대상) that (내용, 문장 형태(Phrase, 구))\r*내용이 ‘누가 뭘 했다’ 등 긴 내용을 말할 때 사용. (주어와 동사 필요)\r– Paul tells me that he likes to visit the new house.\r– They told him that they didn’t buy it.\r3. tell (대상) to do (something)\r*이 경우에는 주로 ‘(누구)에게 (무엇을 하라고)명령하다’라는 뜻으로 사용됩니다.\r– Paul tells me to clean my room.\r– They told him to show them his ID card.\r 전치사를 사용한 표현 \u0026gt;\t1. talk over: ~에 대해 (깊이) 이야기 하다\r– We talked over the new project.\r– Jason talked over his plan to Paris. \u0026gt;\t2. talk (대상) into (동명사): ~하도록 설득하다\r– He talked me into buying his new painting.\r– She talked him into sending a letter.\t say-speak-talk-tell은 아래 홈페이지에서 참조\r참고 : http://cafeclass.kr/say-speak-talk-tell-%EC%B0%A8%EC%9D%B4/\rAmerica(US)\u0026rsquo;s third gender \u0026gt; 1. He\r2. She\r3. Them\r plural (\u0026lsquo;복수형 more than one\u0026rsquo;) - adv. the first person plural\r- n. the first person plural\r singular (\u0026lsquo;단수형 one\u0026rsquo;) - adv. the third person singular form of the verb\r- n. the first person singular\r pass down (\u0026lsquo;전달받다, 물려받다\u0026rsquo;) (casual)  One of the parents’ family names is passed down to the child in Korea. (\u0026lsquo;한국에서는 부모의 성이 아이에게 전해집니다.')\n inherit (\u0026lsquo;상속하다\u0026rsquo;) (formal)  Instead of inheriting all the financial assets to his children, he donated 70% to the society. (\u0026lsquo;모든 금융 자산을 자녀들에게 물려주는 대신 사회에 70 %를 기부했습니다.')\n refer to (\u0026lsquo;인용하다\u0026rsquo;)  he was refer to sentence of poem (\u0026lsquo;그는시의 문장을 언급했다\u0026rsquo;)\n n. ancestor (\u0026lsquo;선조\u0026rsquo;) n. descendent (\u0026lsquo;후손\u0026rsquo;) \u0026gt; (de/di- : minus, later → decline, diminish)\r n. occupation (\u0026lsquo;직업\u0026rsquo;) prince and princess → princes and princesses (plural -es: is) 발음주의 연도읽기   1908 - nineteen-o-eight \u0026gt; nineteen-hundred and eight - The Olympics was held in Pyeongchang in 2018. - 2582 B.C. 2080, 2090   본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":13,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.04.01","uri":"https://offetuoso.github.io/blog/english/202104/20210401-english-speak/"},{"content":"[문제1] 곱하기 혹은 더하기 ###[문제] 곱하기 혹은 더하기 : 문제 설명\n 각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 \u0026lsquo;x\u0026rsquo; 혹은 \u0026lsquo;+\u0026rsquo; 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성. 단, + 보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정.\n   예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2)x 9)x 8)x 4) = 576이다. 또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어짐.   ###[문제] 조건\n 입력조건 첫째 줄에 여러개의 숫자로 구성된 하나의 문자열 S가 주어집니다.(1\u0026lt;=S의 길이 \u0026lt;=20)\n  출력조건 첫째 줄에 만들어 질 수 있는 가장 큰 수를 출력합니다.\n  입력예시\n02984\n  출력예시\n576\n  문자열 내 연산자 계산 가능 메소드  eval()\rresult = eval('(3+5)*7')\rprint(result) # 56\r- 리스트 내 item들을 하나의 문자열로 만들어주는 메소드 list = ['a', 'b', 'c'] print(''.join(list)) # print: abc\r- 리스트에 item 추가 시, 위치 선정이 가능토록하는 메소드\r# list = ['a', 'b', 'c'] list.insert(0, \u0026quot;new\u0026quot;)\rprint(list) # ['new', 'a', 'b', 'c']  ###sum_or_multiply.py\ns = input()\rresult=0\rfor n in list(s) :\rif result == 0 or n == 0 or result == 1 or n == 1 : result += int(n)\relse :\rresult *= int(n)\rprint(result)\r 모범답안 파이썬 data = input()\rresult = int(data[0])\rfor i in range(1,len(data)) :\rnum = int(data[i])\rif num \u0026lt;= 1 or result \u0026lt;= 1:\rresult += num\relse:\rresult *= num\rprint(result)\r ###SumOrMultiply.java\npackage ex.algorism.greedy;\rimport java.util.Scanner;\rpublic class SumOrMultiply {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rString s = sc.nextLine();\rint result = 0;\rfor (int i = 0; i \u0026lt; s.length(); i++) {\rint n = Integer.parseInt(s.substring(i, i+1));\rif(result == 0 || n == 0 || result == 1 || n == 1) {\rresult += n;\r}else {\rresult *= n;\r}\r}\rSystem.out.println(result);\r}\r}\r ###모범답안 자바\npackage ex.algorism.greedy;\rimport java.util.Scanner;\rpublic class SumOrMultiply {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rString str = sc.nextLine();\rlong result = str.charAt(0) - '0';\rfor(int i=1; i \u0026lt; str.length();i++) {\rint num = str.charAt(i) - '0';\rif (num \u0026lt;= 1 ||result \u0026lt;= 1) {\rresult += num;\r}else {\rresult *= num;\r}\r}\rSystem.out.println(result);\r}\r}\r ###[문제] 정당성 분석\n 곱하는 것보다 더하는 것이 더 큰 값을 얻을 수 있다. 곱해서 0또는 1이되는 상황보다, 곱하는게 큰 값을 얻는다\n 이 자료는 나동빈님의 이코테 유튜브 영상을 보고 정리한 자료입니다. 참고 : www.youtube.com/watch?v=m-9pAwq1o3w\u0026amp;amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC\n","description":"최고의 숫자가 되기 위하여 더하기 혹은 곱하기를 진행","id":14,"section":"blog","tags":["Algorism"],"title":"더하기 혹은 곱하기 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202103/sum-and-multiply/"},{"content":"prefers a to b (\u0026lsquo;b 보다 a를 더 선호\u0026rsquo;)  we are prefers apple to banana (\u0026lsquo;우리는 바나나보다 사과를 선호합니다.')\n giving birth (\u0026lsquo;출산\u0026rsquo;) = when the baby was born  when the mother was giving birth (\u0026lsquo;어머니가 출산 할때\u0026rsquo;)\n n. name (\u0026lsquo;이름을 지어주다\u0026rsquo;)  How do American Indian women name their babies? (\u0026lsquo;아메리칸 인디언 여성들은 아기의 이름을 어떻게 지어주나요?')\n compound words (\u0026lsquo;합성어\u0026rsquo;)  handphone is compound word that Consists of two word? (\u0026lsquo;handphone은 두 단어로 구성된 합성어입니다.')\n consists of ~ ('-로 구성된\u0026rsquo;)  notebook consists of many material (\u0026lsquo;노트북은 많은 재료로 구성됩니다.')\n v. believe (\u0026lsquo;믿다\u0026rsquo;) n. belief (\u0026lsquo;신뢰\u0026rsquo;)  belief is very important (\u0026lsquo;믿음은 매우 중요합니다.')\n tend to do (\u0026lsquo;경향이 있다.')  Believer is tend to pray before have a eating (\u0026lsquo;신자는 먹기 전에기도하는 경향이 있습니다 \u0026lsquo;)\n 새로운 단어  belief 신뢰\rgiving birth 신뢰\rprefers 선호하다\rtend to do 경향이 있다.\r 문법오류 Yes, each culture has using same names. → I think there are some common names used in many cultures. For example, Yujin , Suzan, and Susie.\rbackground → American Indian women (tend to) choose their babies’ names from what they saw while giving birth. = American Indian women tend to name their babies from what they saw while giving birth.\rthere are believe the stars and planets influence → because there are beliefs that the stars and plants have important influence (on their lives).\rthey believe astrology and Zodiac.\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":15,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.26","uri":"https://offetuoso.github.io/blog/english/202103/20210326-english-speak/"},{"content":"Introduction (\u0026lsquo;소개, 서론\u0026rsquo;) Introduction → Body → Conclusion  This pagraph is book of Introduction (\u0026lsquo;이 단락은 서론입니다.')\n topic sentence (\u0026lsquo;주제 문장\u0026rsquo;)  this is topic sentence in paragraph (\u0026lsquo;이것은 단락의 주제 문장입니다\u0026rsquo;)\n Q. What is a must-included item when you summarize a text? (\u0026lsquo;글을 요약할때 꼭 포함되어야 하는것?')  main points, paraphrase the topic sentence\n plagiarism (\u0026lsquo;표절\u0026rsquo;)  this book has relate to rumor of plagiarism (\u0026lsquo;이 책은 표절 소문과 연루되어 있습니다\u0026rsquo;)\n customize  (1) to personalize to make sth fit for a certain purpose/situation/…\n  (2) 관습 each culture has its favorite names and naming-customs, so here are some from around the world.\n traditions vs. custom (\u0026lsquo;전통과 관습\u0026rsquo;) occupation (n) (\u0026lsquo;직업, Job보다 캐쥬얼 하지 않은 뜻\u0026rsquo;)  job categories → occupation categories main occupation My main occupation is a programmer, but I also work as a part-time teacher.\n elder (\u0026lsquo;무리의 가장큰 어른\u0026rsquo;) all in all - in general, most of the time (\u0026lsquo;전체적으로 \u0026lsquo;) 새로운 단어 custom 관습\roccupation 직업\rplagiarism 표절\r 문법오류 name’s meaning → meaning of names\rWhat did we do yesterday? / We learned about the meaning of names from many cultures (around the world)\rThird paragraph is the topic’s examples. Topic is culture’s names\r→ This text is introducing different naming cultures around the world. It gives/includes examples of Mongolian, North American Indian, Eskimo, and Russian cultures.\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":16,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.25","uri":"https://offetuoso.github.io/blog/english/202103/20210325-english-speak/"},{"content":"Read the sentences (\u0026lsquo;문장 읽기\u0026rsquo;)  you must to read the sentences in book (\u0026lsquo;책에있는 문장을 읽어야합니다\u0026rsquo;)\n Read the sentences (\u0026lsquo;문장 읽기\u0026rsquo;)  you must to read the sentences in book (\u0026lsquo;책에있는 문장을 읽어야합니다\u0026rsquo;)\n some (\u0026lsquo;약간, 전체는 아니고, 아예 아닌것도 아님\u0026rsquo;)  some people who attempt to change (\u0026lsquo;변화를 시도하는 사람들\u0026rsquo;)\n 새로운 단어 passage 문구 / 통로\rsilently 잠자코, 조용히\rrepeat 반복\rintonation 말의 높낮이\rsome not all but not none\r 문법오류 I was weekends also studying English and.. --\u0026gt; I spudied during the weekends.\r--\u0026gt; I had to study during the weekends.\r(Subject Noun+ Action Verb + etc)\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":17,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.24","uri":"https://offetuoso.github.io/blog/english/202103/20210324-english-speak/"},{"content":"[문제1] 1이 될때까지 ###[문제] 1이 될때까지 : 문제 설명\n 어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.\n   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다. 결과적으로 이경우 전체과정을 실행한 횟수는 3이된다. 이는 N을 1로 만드는 최소 횟수이다. N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야하는 최소 횟수를 구하는 프로그램을 작성하시오\n ###[문제] 조건\n 입력조건 첫째줄에 N(2 \u0026lt;= N \u0026lt; = 100000)과 K(2 \u0026lt;= K \u0026lt; = 100000)가 공백으로 구분되며 각각 자연수로 주어진다. 이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.\n  출력조건 첫째줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.\n  입력예시\n25 5\n  출력예시\n2\n ###make_one.py\nn, k = map(int, input().split()) #n=13, k=5\rresult = 0\rwhile True :\r# n을 K로 나눈 몫에 k를 곱하여,\r# 나눌수 있는 값을 계산 # roof 1 step # roof 2 step\rtarget = (n // k) * k #target = 10 #target = 0\rresult += (n - target) #result += 3 \u0026lt;\u0026lt;한번에 카운트 3을 추가하고 #result(4) += 2\rn = target #n = target \u0026lt;\u0026lt;13을 10으로 만듬 #n=0\rif n \u0026lt; k : #false #true\rbreak\rresult += 1\t#나눗셈에 대한 result(3) +1\tn //= k\t#n = 2\rresult += (n - 1) #result(6) += -1 \u0026lt;n을 0까지 만들면서, 횟수 -1\rprint(result) #5  ###MakeOne.java\npackage ex.algorism.greedy;\rimport java.util.Scanner;\rpublic class MakeOne {\rpublic static void main(String[] args) {\rScanner sc = new Scanner(System.in);\rint n = sc.nextInt();\rint k = sc.nextInt();\rint result = 0;\rwhile (true) {\rint target = (n/k)*k;\rresult += n-target;\rn = target;\rif(n \u0026lt; k) {\rbreak;\r}\rn = n / k;\rresult++;\r}\rresult += (n-1);\rSystem.out.println(result);\r}\r}\r ###[문제] 정당성 분석\n 1을 빼는 것보다 나누는 것이 더 기하급수적으로 빠르게 줄일 수 있다. K가 2보다 크다면, K로 나누는 것이 1을 빼는것 보다 항상 빠르게 N을 줄일 수 있다. 또한 N은 항상 1에 도달하게 됨.\n 이 자료는 나동빈님의 이코테 유튜브 영상을 보고 정리한 자료입니다. 참고 : www.youtube.com/watch?v=m-9pAwq1o3w\u0026amp;amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC\n","description":"1이 될때까지 알고리즘.","id":18,"section":"blog","tags":["Algorism"],"title":"1이 될때까지 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202103/make-one/"},{"content":"[문제1] 거스름돈 ###[문제] 거스름돈 : 문제 설명\n 당신은 음식점의 계산을 도와주는 점원입니다. 카운트에서는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬로 줘야 할 돈은 N은 항상 10의 배수입니다.\n ###[문제] 거스름돈 : 문제 해결 아이디어\n  최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐의 단위부터 돈을 거슬러 주면 됩니다. N원을 거슬러 줘야 할 때, 가장먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러줍니다. 이후에 100원, 50원, 10원짜리 동전을 차례대로 거슬러 줄 수 있을 만큼 거슬러주면 됩니다. N = 1,260일 때의 예시를 확인해 봅시다.    1,260 원을 500원부터 거슬러 준다면 아래와 같이\n    화페단위 500 100 50 10     손님이 받은 개수 2 2 1 1    ###[문제] 거스름돈 : 정당성 분석\n  가장큰 화폐단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는 무엇일까요? 가지고 있는 동전중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문입니다. 만약 800원을 거슬러 주어야 하는데 화폐 단위가 500원 400원 100원이라면 어떻게 될까요 ? -\u0026gt; 400원 짜리 2개가 정답이됨 그리디 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토할 수 있어야 합니다.   ###reverse_change.py\nn =1260\rcount = 0 array = [500,100,50,10]\rfor coin in array:\rcount += n / coin\rn %= coin print(count)\r ###ReverseCharge.java\npackage ex.algorism.greedy;\rpublic class ReverseCharge {\rpublic static void main(String[] args) {\rint n = 1260;\rint[] coins = {500,100,50,10};\rint count = 0;\rfor (int coin : coins) {\rcount += n/coin;\rn %= coin;\r}\rSystem.out.println(count);\r}\r}\r ####[문제] 거스름돈 : 시간 복잡도 분석\n  화폐의 종류가 K라고 할때, 소스코드의 시간복잡도는 O(K)이다. 이 알고리즘의 시간복잡도는 거슬러줘야 하는 금액과는 무관하며, 동전의 총 종류에만 영향을 받는다.   이 자료는 나동빈님의 이코테 유튜브 영상을 보고 정리한 자료입니다. 참고 : www.youtube.com/watch?v=m-9pAwq1o3w\u0026amp;amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC\n","description":"그리디 알고리즘.","id":19,"section":"blog","tags":["Algorism","Greedy","이코테"],"title":"거스름돈 (그리디 알고리즘)","uri":"https://offetuoso.github.io/blog/algorithm/202103/reverse-charge/"},{"content":"그리디 알고리즘(탐욕법) 그리디 알고리즘이란 ?  그리디 알고리즘이란\n 그리디 알고리즘(탐욕법)은 현재상황에서 가장 좋은 것만 고르는 방법을 의미. 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 있는 능력을 요구. 그리디 해법은 그 정당성 분석이 중요. 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요.   [문제 상황] 루트 노드로 부터 시작하여 가는 노드의 합을 최대로 만들고 싶습니다.  Q. 최적의 해는 무엇인가요 ?\n  Q. 단순히 매 상황에서 가장큰 값을 고른다면 어떻게 될까요?\n   일반적인 상황에서 그리디알고리즘은 최적의 해를 보장할 수 없을때가 많다. 하지만 코딩 테스트에서의 대부분의 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제됨.   이 자료는 나동빈님의 이코테 유튜브 영상을 보고 정리한 자료입니다. 참고 : www.youtube.com/watch?v=m-9pAwq1o3w\u0026amp;amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC\n","description":"그리디 알고리즘.","id":20,"section":"blog","tags":["Algorism"],"title":"그리디 알고리즘","uri":"https://offetuoso.github.io/blog/algorithm/202103/greedy-algorithm/"},{"content":"do you mind?  (1) Are you okay/fine with it? (\u0026lsquo;괜찮나요?') Do you mind if I change the schedule? 괜찮다면, 스케쥴을 변경해도 될까요? (2) Mind your own business. (\u0026lsquo;니 일이나 신경써.') Do you mind? 니 일이나 신경써.\n attempt to ~ ('-를 시도하다.')  they are attempt to find something 그들은 무언갈 찾으려 한다. i attempt to speaking english 나는 영어로 말하길 시도한다.\n I had a meeting ~ ('-를 만났다.')  I had a meeting with english teacher 나는 영어 선생님과 Meeting을 가졌다.(만났다.) I had a meeting with my friends 나는 친구를 만났다\n - means ~ ('-의 뜻은 -입니다\u0026rsquo;)  **my name\u0026rsquo;s means a victory ** 내 이름은 승리를 의미합니다. **\u0026lsquo;팽-하\u0026rsquo; means \u0026lsquo;펭수 하이\u0026rsquo; ** \u0026lsquo;펭-하\u0026rsquo;는 \u0026lsquo;펭수-하이\u0026rsquo;를 뜻합니다.\n adv. accurate (\u0026lsquo;정확한\u0026rsquo;)  **Do you think the information on the table is accurate? ** 테이블의 정보가 정확하다고 생각하나요?\n familiar with (\u0026lsquo;익숙한\u0026rsquo;)  **familiar with the technical terms ** 기술 용어에 익숙 함\n n. accuracy (\u0026lsquo;정확\u0026rsquo;) v. intend (\u0026lsquo;의도하다\u0026rsquo;)  **I didn’t intend to offend you(her) when I laughed at your(her) new haircut. ** 당신의 새 머리를 보고 웃은 것은 마음을 상하게 할 의도는 없었어요.\n 새로운 단어 honorable contribution 명예로운 공헌\rachievement 업적\rmaterial 재료\rconversation 대화\rjudgement 판단\rnervous 긴장한\r 문법오류 one time ago → an hour ago\rI has → had a meeting with Sophia an hour ago\rI have a class with June today.\rWe call him an old-fashioned man. Olivia is meaning → Olivia means Olive and peace.\rI have heard of ~\rI’ve heard of Jack from the book, I’m also familiar with the name Charlie.\rI think the Korea column is not that accurate.\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":21,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.19","uri":"https://offetuoso.github.io/blog/english/202103/20210319-english-speak/"},{"content":"Did you take a look at ~? ('-보셨나요?')  Did you take a look at the Book 책 보셨나요? Did you take a look at sky? 하늘을 보셨나요?\n I took a look at ~ (\u0026lsquo;나는 -를 보았다.')  I took a look at the book, 1 hour ago 1 시간 전에 책을 봤어요. I was took a look at sky last day 나는 어제 하늘을 봤어요\n adv. impressed (\u0026lsquo;깊은 인상\u0026rsquo;) n. impression (\u0026lsquo;인상\u0026rsquo;) I’m impressed by ~ (\u0026lsquo;나는 당신의 -에 감동받았습니다.')  I’m impressed by your letter 나는 당신의 편지에 감동받았습니다. I’m impressed by your passion 나는 당신의 열정에 감동받았습니다.\n related to ~ ('-와 연관되다.')  I think, he is related to crime 그는 범죄와 관련된 것 같아요. my homework relate to math 나의 숙제는 수학과 관련있다.\n v. skim  He always skimmed the book 그는 항상 책을 훑어보았다.\n v. scan adv. intermediate (중급의) beginners → intermediate → high/advanced level\r  He was in intermediate class, 3 month ago 그는 3개월 전에 중급반이였다.\n 영어 8품사 사전 표기법 \rn. 명사 (noun [naun] )\r-모든 사람, 사물, 동물의 이름을 나타내는 단어\r-문장에서 주어, 보어, 목적어가 된다.\r*C : 가산명사\r*U : 불가산명사\r*CU : 주로 가산명사\r*UC : 주로 불가산명사\r*sing. : 단수형\r*pl. : 복수형\r*n.pl. : 복수명사\r*fem. : 여성형\r*neg. : 부정형\rpron. 대명사 (pronoun [próunàun] )\r-인칭대명사: I, my, me, mine, myself, she, her, he, his, him 등\r-지시대명사: it, this, these, that, those 등\r*obj : 목적격\r*poss : 소유격\rv. 동사 (verb [vəːrb] )\rvtr. 타동사 (Transitive Verb)\rvi. 자동사 (Intransitive Verb)\r-동작이나 상태를 나타내는 단어\r-be동사 : am, are, is, was, were 등\r-일반동사 : be동사와 조동사를 제외한 나머지 동사\r*auxil. v. : 조동사 - can, may, will, should, must 등\r*p. : 과거형\r*p.p. : 과거분사형\r*pres.p. : 현재분사\r※목적어로 구분하는 자동사와 타동사\r자동사 : 목적어를 취하지 않는 동사\r타동사 : 목적어를 취하는 동사\r동사뒤에 목적어(영향을 받는 사람이나 사물)(이)가 필요한지 여부에 따라서\r자동사(Intransitive Verb)와 타동사(Transitive Verb)로 구분할 수 있습니다. adj. (or a.) 형용사 (adjective [ǽdʒiktiv] )\r-명사나 대명사를 수식하거나 보충 설명하는 단어\r-우리말에서 보통 \u0026lt; ~ㄴ, ~한\u0026gt; 으로 해석되는 단어\radv. (or ad.) 부사 (adverb [ǽdvəːrb] )\r-형용사, 다른 부사, 동사, 문장전체를 수식하는 단어\r-① 형용사 / 다른 부사 수식 : This is a very very delicious cake.\r-② 동사 수식 : She can run fast.\r-③ 문장 전체 수식 : Luckily, I passed the exam.\rprep. 전치사 (preposition [prèpəzíʃən] ) -명사나 대명사 앞에 쓰여서 장소, 시간 등을 나타내는 단어\r-in, at\r*pref. : 접두사\r*suf. : 접미사\rconj. 접속사 (conjunction [kəndʒΛŋkʃən] )\r-단어와 단어, 문장과 문장 등을 연결하는 단어\r-when, or, and\rinterj. (or int.) 감탄사 (interjection [ìntərdʒékʃən] )\r-놀람, 기쁨 등 감정을 나타내는 단어\r-Oh, Wow\r출처: https://fireball.tistory.com/409 [What's up]\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":22,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.17","uri":"https://offetuoso.github.io/blog/english/202103/20210317-english-speak/"},{"content":"I use ~ (\u0026lsquo;난 -를 사용한다.')  I use Java 난 자바를 사용한다. I use Korean 난 한국어를 사용한다.\n I’m preparing ~ ('-를 준비중입니다\u0026rsquo;)  ** I’m preparing to change job ** 나는 이직을 준비중입니다. ** I’m preparing to party in my house ** 우리 집에서 파티를 준비하고 있어요.\n ~ is intense ('-이 ~빡세다~힘들다.')\n Work is not intense 일은 힘들지 않다. Always Study is intense 공부는 힘들다.\n I learned ~ (\u0026lsquo;나는 -배웠다\u0026rsquo;)  I learned computer science in my University 나는 대학에서 컴퓨터를 전공했다. I learned baking bread 나는 빵굽기를 배웠다.\n I want to ~ ('-하고 싶습니다.')  I want to hold your hand 당신의 손을 잡고 싶습니다. I want to change job! 이직하고 싶어요!\n I\u0026rsquo;m good at ~ (\u0026lsquo;나는 -잘해\u0026rsquo;)  I\u0026rsquo;m good at make smile 나는 미소를 잘 짓습니다. I\u0026rsquo;m good at cleaning my room 나는 내방 청소를 잘해요\n I\u0026rsquo;m about to ~ (\u0026lsquo;나는 -할 예정이다\u0026rsquo;)  I\u0026rsquo;m about to go to bed 나는 자러갈 예정이다. I\u0026rsquo;m about to study english 나는 영어공부를 할 예정이다.\n Benefits \u0026amp; Drawbacks (장점 \u0026amp; 단점)\rTake your time (천천히) Achievement (성취감)\rWorking late (야근) Intense (빡센) Regular job = 정규직\rStable job = 안정감 있는 직업 Objective / Goal = 목표\rRegret = 후회\rAge Limit = 나이 제한\rVaccine = 백신\rPandemic = 전국적인 유행병\rGovernance = 통치  본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":23,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.16","uri":"https://offetuoso.github.io/blog/english/202103/20210316-english-speak/"},{"content":"I’m used to ~ (\u0026lsquo;난 -에 익숙해\u0026rsquo;)  I\u0026rsquo;m used to you 난 너에게 익숙해 I\u0026rsquo;m used to working overtime 난 야근에 익숙해\n I\u0026rsquo;m afraid ~ (\u0026lsquo;유감스럽지만,')  I\u0026rsquo;m afraid Rainy outside 유감이지만, 밖에 비가 오는 것 같아 **I\u0026rsquo;m afraid ** 유감이지만, 밖에 비가 오는 것 같아\n I’m working on ~ (\u0026lsquo;지금 -를 하고있어\u0026rsquo;)  I’m working on my English speaking 난 영어 말하기를 공부하고 있어 i\u0026rsquo;m working on study Algorithm 난 알고리즘을 공부하고 있어\n I’m ~ is bad (\u0026lsquo;난 -가 안좋다\u0026rsquo;)  I’m health is bad 난 건강이 안좋다 I\u0026rsquo;m english is bad 난 영어를 잘 못한다.\n My girlfriend is another event. → My girlfriend had a personal schedule (She went out to hang out with her friends.)\rI’m English is tiny → My English is bad. / I’m not that good at English. → I’m still learning English. / I’m working on my English speaking.\r(Q. What is the charm of skateboarding?) A. other skateboarders communication → (full sentence) I think the charm of skateboarding is that I can ride skateboards with other skateboarders. / I enjoy riding skateboards with other people → (shorter) Communicating with other skateboarders is the best. / the greatest charm. skateboarding stage → spot\rshortboard and longboard and skateboard → I started with the shortboard and then the longboard and then the skateboard. / I started with the shortboard and then the longboard. Now I can ride the standard skateboard as well.\rIsn’t/Wasn’t living in other countries tough?\rhave an access to\rhang out (Google HangOut / Meet) - to meet someone or to play with someone, usually friends.\rMy hobby is skateboarding. → I enjoy(love) skateboarding in my free time.\rI started in-door climbing recently. / I’m into sth. = having a great interest in sth\r 본 게시물은 개인 복습용이라 수업내용과 별개 입니다. 예시로 만든 문장은 문법적 오류가 있을 수 있습니다. 잘못된 점이 있다면 댓글로 남겨주시면 수정하겠습니다.\nend ","description":"영어 회화 문법정리","id":24,"section":"blog","tags":["english","speak","talk","EngAll","잉그올"],"title":"잉그올 영어 회화 21.03.15","uri":"https://offetuoso.github.io/blog/english/202103/20210315-english-speak/"},{"content":"자바 자바가상머신 (JVM) 자바의 장점 자바의 단점 자바의 기초 문법 객체지향과 자바 객체지향 프로그램 언어 객체 상속 오버라이딩 (Overriding)  오버라이딩이란?\n  사전적 의미로는 more important than any other considerations 번역해 보면 다른 고려 사항보다 더 중요하다이다.\n  부모 클래스로 부터 상속받은 메소드를 자식 클래스에서 재정의 하여, 덮어 쓰는 것이다. 상속받은 메소드를 그대로 사용할 수도 있지만, 자식 클래스에서 상황에 맞게 변경해야 하는 경우 오버라이딩을 사용한다.\n  오버라이딩을 사용하기 위한 조건에는 부모 클래스의 메소드를 재정의하는 것이므로 이름, 매개변수 리턴 값이 모두 같아야 한다.\n  오버라이딩의 조건\n 부모 클래스와 자식 클래스 사이에서만 성립한다. static 메소드는 오버라이딩 할 수 없다. static 메소드 끼리의 오버라이딩은 hiding이라 한다. private는 정의된 메소드는 상속 자체가 안된다. interface 메소드를 오버라이딩 할 경우엔 public으로 해야한다. 메소드의 파라미터가 완전히 일치해야 하며, 리턴타입도 같아야 한다. 파라미터의 이름은 상관없다. 부모 클래스의 접근제어자보다 좁아질 수 없다. 확장 될 수는 있다. 부모 클래스보다 더 많은 예외를 던질 수 있다. final 예약어로 정의된 메소드는 오버라이딩 할 수 없다.    아래 소스코드를 보면,\n main 클래스를 가지고 있는 Example 클래스 Talk라는 기능을 가진 부모 클래스, Person 클래스. Person을 부모로 가지고 있는 자식 클래스, Korean, American, Japanese로 구성되어있다. 모두 Talk 메소드를 가지고 있지만 각각 다른 기능을 수행한다.   Example.java package ex.java.overriding;\rpublic class Example {\rpublic static void main(String[] args) {\rPerson person = new Person();\rperson.Talk();\rKorean korean = new Korean();\rkorean.Talk();\rAmerican american = new American();\ramerican.Talk();\rJapanese japanese = new Japanese();\rjapanese.Talk();\r}\r}\rclass Person {\rvoid Talk() {\rString message = \u0026quot;Aaaa\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass Korean extends Person{\r@Override\rvoid Talk() {\rString message = \u0026quot;안녕하세요!\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass American extends Person{\r@Override\rpublic void Talk() {\rString message = \u0026quot;Hello!\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass Japanese extends Person{\r@Override\rprotected void Talk() {\rString message = \u0026quot;Konnichiwa!\u0026quot;;\rSystem.out.println(message);\r}\r}\r result Aaaa\r안녕하세요!\rHello!\rKonnichiwa!\r  소스를 보다보면 자식 클래스의 메소드 바로 위에 @override라는 것이 보일 것이다. 이것은 Annotation 이라는 주석 기능이다. 하지만 우리가 알고 있는 주석과는 다르며 컴퓨터는 그것을 이 메소드는 부모 클래스로 부터 오버라이드 받은 메소드이다. 명시해 주는것이다. 만일 메소드가 아래의 경우 오류로 알려준다.\n 1. 메소드 명칭이 잘못된경우\rThe method talks() of type Korean must override or implement a supertype method\r2. 리턴타입이 잘못된경우 The return type is incompatible with Person.Talk()\r3. 파라미터가 잘못된경우\rThe method Talk(String) of type Korean must override or implement a supertype method\r 오버로딩 (Overloading)  오버로딩이란?\n  사전적 의미로는 loading of a vehicle with too heavy a weight. 번역해 보면 너무 무거운 중량의 차량 적재.이다. 쉽게 말하면 과적해서 싣는 것이다.\n  보통 하나의 이름을 가진 메소드는 1개만 존재 하지만, 파라미터가 다르다면 컴퓨터는 오버로드된 메소드로 인식하여 다른 메소르도 인식함.\n  오버로딩이 되는 조건은\n 메소드 이름이 같아야 한다. 메소드의 파라미터의 형이 다르거나 갯수가 다르거나 순서가 다름. 반환타입은 영향을 미치지 않는다.    아래 소스코드를 보면,\n main 클래스를 가지고 있는 Example 클래스 Mountain이라는 클래스가 있고 echo라는 입력하면 답변을 해주는 메소드가 있다. 같은 이름의 다른 파라미터를 갖는 3개의 echo가 있다.   Example.java package ex.java.overloading;\rpublic class Example {\rpublic static void main(String[] args) {\rMountain mountain = new Mountain();\rmountain.echo(\u0026quot;Hello\u0026quot;); //문자열 입력\rmountain.echo(100);\t//숫자 입력\rmountain.echo(true);\t//참,거짓 입력\r}\r}\rclass Mountain {\rvoid echo(String say) {\rSystem.out.println(\u0026quot;you say \u0026quot;+say);\r}\rvoid echo(int money) {\rSystem.out.println(\u0026quot;you have \u0026quot;+money+\u0026quot; doller\u0026quot;);\r}\rvoid echo(Boolean bool) {\rif(bool) {\rSystem.out.println(\u0026quot;this is True\u0026quot;);\r}else {\rSystem.out.println(\u0026quot;this is False\u0026quot;);\r}\r}\r}\r result you say Hello\ryou have 100 doller\rthis is True\r  결과를 보면 어렵진 않다. 컴퓨터는 입력된 파라미터에 따라 어떤 함수를 호출할지 보여준다. 예를들면 우리가 많이 사용하는 System.out.println(); 출력 함수가 있다.\n  주의할점 파라메터의 순서를 다르게 오버라이드 하였지만, int와 long 모두 소숫점이 없는 정수를 입력 가능하기 때문에 컴퓨터의 입장에서는 어느 메소드를 사용할지 애매한경우가 생긴다.\n The method sum(int, long) is ambiguous for the type Calculator Calculator의 메소드 sum (int, long)은 형식에 대해 모호합니다.\n\tpublic class Example {\rpublic static void main(String[] args) {\rCalculator cal = new Calculator();\rcal.sum(1, 5);\r}\r}\rclass Calculator {\rvoid sum(int a, long b) {\rSystem.out.println(\u0026quot;sum is \u0026quot;+ (a+b));\r}\rvoid sum(long a, int b) {\rSystem.out.println(\u0026quot;sum is \u0026quot;+ (a+b));\r}\r}\r 다형성 오버라이딩을 이용한 다형성  위에서 오버라이딩을 설명했던 소스와 다른점 한가지가 있다. 그것은 main 클래스에서 자식 클래스를 선언하는 부분이다.\n Example.java package ex.java.overriding;\rpublic class Example {\rpublic static void main(String[] args) {\rPerson person = new Person();\rperson.Talk();\rperson = new Korean(); // Korea클래스의 인스턴스를 Person타입인 person으로 참조하여 사용.\rperson.Talk();\rperson = new American(); // American클래스의 인스턴스를 Person타입인 person으로 참조하여 사용.\rperson.Talk();\rperson = new Japanese();\t// Japanese클래스의 인스턴스를 Person타입인 person으로 참조하여 사용.\rperson.Talk();\r}\r}\rclass Person {\rvoid Talk() {\rString message = \u0026quot;Aaaa\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass Korean extends Person{\r@Override\rvoid Talk() {\rString message = \u0026quot;안녕하세요!\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass American extends Person{\r@Override\rpublic void Talk() {\rString message = \u0026quot;Hello!\u0026quot;;\rSystem.out.println(message);\r}\r}\rclass Japanese extends Person{\r@Override\rprotected void Talk() {\rString message = \u0026quot;Konnichiwa!\u0026quot;;\rSystem.out.println(message);\r}\r}\r result Aaaa\r안녕하세요!\rHello!\rKonnichiwa!\r 참조변수의 다형성  참조변수가 사용할 수 있는 멤버의 개수가 실제 인스턴스의 멤버 개수보다 같거나 적어야 참조할 수 있다. 클래스는 상속을 통해 확장될 수는 있어도 축소될 수는 없기 때문에, 자식클래스에서 사용할 수 있는 멤버의 개수는 언제나 부모 클래스와 같거나 많게 된다.\n \rPerson person = new Person(); //정상\rKorean korean = new Korean(); //정상\r// 부모 클래스인 person은 Korean을 포함할 수 있다.\rPerson person = new Korean(); //정상\r// 부모 클래스는 자식으로 참조 할수 없다. Korean korean = new Person();\t//오류\r 참조변수의 형변환  자식클래스를 부모 클래스로 참조할때 자식 클래스로 형 변환 할 수 있다.\n \rPerson person = new Person();\rperson.Talk();\rKorean korean = new Korean();\rperson = (Korean) korean; //(Korean) 타입으로 형변환\rkorean.Talk();\rAmerican american = new American();\rperson = (American) american; //(American) 타입으로 형변환\ramerican.Talk();\rJapanese japanese = new Japanese(); //(Japanese) 타입으로 형변환\rperson = (Japanese) japanese;\rjapanese.Talk();\rperson = (American) japanese; //오류 !\rjapanese.Talk();\r 추상화 인터페이스 ","description":"자바의 기본 개념정리.","id":25,"section":"blog","tags":["java"],"title":"자바의 기본개념","uri":"https://offetuoso.github.io/blog/java/basic-java/"},{"content":"Nothing on this page will be visible. This file exists solely to respond to /search URL.\nSetting a very low sitemap priority will tell search engines this is not important content.\n","description":"","id":26,"section":"","tags":null,"title":"Search Results","uri":"https://offetuoso.github.io/search/"}]