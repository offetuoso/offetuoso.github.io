<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on offetuoso&#39;s Blog</title>
    <link>https://offetuoso.github.io/blog/</link>
    <description>Recent content in Blogs on offetuoso&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>© 2021</copyright>
    <lastBuildDate>Wed, 24 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://offetuoso.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1이 될때까지 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/make-one/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/make-one/</guid>
      <description>[문제1] 1이 될때까지 ###[문제] 1이 될때까지 : 문제 설명
 어떠한 수 N이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
   N에서 1을 뺍니다. N에서 K로 나눕니다.    예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.</description>
    </item>
    
    <item>
      <title>거스름돈 (그리디 알고리즘)</title>
      <link>https://offetuoso.github.io/blog/reverse-charge/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/reverse-charge/</guid>
      <description>[문제1] 거스름돈 ###[문제] 거스름돈 : 문제 설명
 당신은 음식점의 계산을 도와주는 점원입니다. 카운트에서는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬로 줘야 할 돈은 N은 항상 10의 배수입니다.
 ###[문제] 거스름돈 : 문제 해결 아이디어
  최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐의 단위부터 돈을 거슬러 주면 됩니다. N원을 거슬러 줘야 할 때, 가장먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러줍니다.</description>
    </item>
    
    <item>
      <title>그리디 알고리즘</title>
      <link>https://offetuoso.github.io/blog/greedy-algorithm/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/greedy-algorithm/</guid>
      <description>그리디 알고리즘(탐욕법) 그리디 알고리즘이란 ?  그리디 알고리즘이란
 그리디 알고리즘(탐욕법)은 현재상황에서 가장 좋은 것만 고르는 방법을 의미. 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 있는 능력을 요구. 그리디 해법은 그 정당성 분석이 중요. 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요.   [문제 상황] 루트 노드로 부터 시작하여 가는 노드의 합을 최대로 만들고 싶습니다.  Q. 최적의 해는 무엇인가요 ?</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.19</title>
      <link>https://offetuoso.github.io/blog/20210319-english-speak/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/20210319-english-speak/</guid>
      <description>do you mind?  (1) Are you okay/fine with it? (&amp;lsquo;괜찮나요?&#39;) Do you mind if I change the schedule? 괜찮다면, 스케쥴을 변경해도 될까요? (2) Mind your own business. (&amp;lsquo;니 일이나 신경써.&#39;) Do you mind? 니 일이나 신경써.
 attempt to ~ (&#39;-를 시도하다.&#39;)  they are attempt to find something 그들은 무언갈 찾으려 한다.
 I had a meeting ~ (&#39;-를 만났다.&#39;)  I had a meeting with english teacher 나는 영어 선생님과 Meeting을 가졌다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.17</title>
      <link>https://offetuoso.github.io/blog/20210317-english-speak/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/20210317-english-speak/</guid>
      <description>Did you take a look at ~? (&#39;-보셨나요?&#39;)  Did you take a look at the Book 책 보셨나요?
 I took a look at ~ (&amp;lsquo;나는 -를 보았다.&#39;)  I took a look at the book, 1 hour ago 1 시간 전에 책을 봤어요.
 adv. impressed (&amp;lsquo;깊은 인상&amp;rsquo;) n. impression (&amp;lsquo;인상&amp;rsquo;) I’m impressed by ~ (&amp;lsquo;나는 당신의 -에 감동받았습니다.&#39;)  I’m impressed by your letter 나는 당신의 편지에 감동받았습니다.</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.16</title>
      <link>https://offetuoso.github.io/blog/20210316-english-speak/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/20210316-english-speak/</guid>
      <description>I use ~ (&amp;lsquo;난 -를 사용한다.&#39;)  I use Java 난 자바를 사용한다.
 I’m preparing ~ (&#39;-를 준비중입니다&amp;rsquo;)  ** I’m preparing to change job ** 나는 이직을 준비중입니다.
 ~ is intense (&#39;-이 ~빡세다~힘들다.&#39;)
 Work is not intense 일은 힘들지 않다.
 I learned ~ (&amp;lsquo;나는 -배웠다&amp;rsquo;)  I learned computer science in my University
 I want to ~ (&#39;-하고 싶습니다.&#39;)  I want to hold your hand</description>
    </item>
    
    <item>
      <title>잉그올 영어 회화 21.03.15</title>
      <link>https://offetuoso.github.io/blog/20210315-english-speak/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/20210315-english-speak/</guid>
      <description>I’m used to ~ (&amp;lsquo;난 -에 익숙해&amp;rsquo;)  I&amp;rsquo;m used to you 난 너에게 익숙해
 I&amp;rsquo;m afraid ~ (&amp;lsquo;유감스럽지만,&#39;)  I&amp;rsquo;m afraid Rainy outside 유감이지만, 밖에 비가 오는 것 같아
 I’m working on ~ (&amp;lsquo;지금 -를 하고있어&amp;rsquo;)  I’m working on my English speaking 난 영어 말하기를 공부하고 있어
 My girlfriend is another event. → My girlfriend had a personal schedule (She went out to hang out with her friends.</description>
    </item>
    
    <item>
      <title>자바의 기본개념</title>
      <link>https://offetuoso.github.io/blog/basic-java/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://offetuoso.github.io/blog/basic-java/</guid>
      <description>자바 자바가상머신 (JVM) 자바의 장점 자바의 단점 자바의 기초 문법 객체지향과 자바 객체지향 프로그램 언어 객체 상속 오버라이딩 (Overriding)  오버라이딩이란?
  사전적 의미로는 more important than any other considerations 번역해 보면 다른 고려 사항보다 더 중요하다이다.
  부모 클래스로 부터 상속받은 메소드를 자식 클래스에서 재정의 하여, 덮어 쓰는 것이다. 상속받은 메소드를 그대로 사용할 수도 있지만, 자식 클래스에서 상황에 맞게 변경해야 하는 경우 오버라이딩을 사용한다.
  오버라이딩을 사용하기 위한 조건에는 부모 클래스의 메소드를 재정의하는 것이므로 이름, 매개변수 리턴 값이 모두 같아야 한다.</description>
    </item>
    
  </channel>
</rss>
